// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_to_server.proto

#include "client_to_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SyncCloudDrive {
PROTOBUF_CONSTEXPR CRegister::CRegister(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , password_md5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CRegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CRegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CRegisterDefaultTypeInternal() {}
  union {
    CRegister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CRegisterDefaultTypeInternal _CRegister_default_instance_;
PROTOBUF_CONSTEXPR CLogin::CLogin(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , password_md5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CLoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLoginDefaultTypeInternal() {}
  union {
    CLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLoginDefaultTypeInternal _CLogin_default_instance_;
PROTOBUF_CONSTEXPR CUploadFile::CUploadFile(
    ::_pbi::ConstantInitialized)
  : md5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , parent_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , size_(0)
  , no_(0){}
struct CUploadFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CUploadFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CUploadFileDefaultTypeInternal() {}
  union {
    CUploadFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CUploadFileDefaultTypeInternal _CUploadFile_default_instance_;
PROTOBUF_CONSTEXPR CDownLoad::CDownLoad(
    ::_pbi::ConstantInitialized)
  : file_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , slide_no_(0){}
struct CDownLoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDownLoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDownLoadDefaultTypeInternal() {}
  union {
    CDownLoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDownLoadDefaultTypeInternal _CDownLoad_default_instance_;
PROTOBUF_CONSTEXPR CUploadData::CUploadData(
    ::_pbi::ConstantInitialized)
  : md5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , slide_no_(0)
  , no_(0){}
struct CUploadDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CUploadDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CUploadDataDefaultTypeInternal() {}
  union {
    CUploadData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CUploadDataDefaultTypeInternal _CUploadData_default_instance_;
PROTOBUF_CONSTEXPR CDeleteFile::CDeleteFile(
    ::_pbi::ConstantInitialized)
  : file_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CDeleteFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDeleteFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDeleteFileDefaultTypeInternal() {}
  union {
    CDeleteFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDeleteFileDefaultTypeInternal _CDeleteFile_default_instance_;
PROTOBUF_CONSTEXPR CAddDirectory::CAddDirectory(
    ::_pbi::ConstantInitialized)
  : parent_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CAddDirectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CAddDirectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CAddDirectoryDefaultTypeInternal() {}
  union {
    CAddDirectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CAddDirectoryDefaultTypeInternal _CAddDirectory_default_instance_;
PROTOBUF_CONSTEXPR CDeleteDirectory::CDeleteDirectory(
    ::_pbi::ConstantInitialized)
  : directory_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CDeleteDirectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDeleteDirectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDeleteDirectoryDefaultTypeInternal() {}
  union {
    CDeleteDirectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDeleteDirectoryDefaultTypeInternal _CDeleteDirectory_default_instance_;
PROTOBUF_CONSTEXPR CModifyUser::CModifyUser(
    ::_pbi::ConstantInitialized)
  : content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0){}
struct CModifyUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CModifyUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CModifyUserDefaultTypeInternal() {}
  union {
    CModifyUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CModifyUserDefaultTypeInternal _CModifyUser_default_instance_;
}  // namespace SyncCloudDrive
static ::_pb::Metadata file_level_metadata_client_5fto_5fserver_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_client_5fto_5fserver_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_client_5fto_5fserver_2eproto = nullptr;

const uint32_t TableStruct_client_5fto_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CRegister, name_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CRegister, password_md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CLogin, name_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CLogin, password_md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CUploadFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CUploadFile, md5_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CUploadFile, name_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CUploadFile, size_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CUploadFile, parent_id_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CUploadFile, no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CDownLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CDownLoad, file_id_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CDownLoad, slide_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CUploadData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CUploadData, md5_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CUploadData, slide_no_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CUploadData, data_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CUploadData, no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CDeleteFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CDeleteFile, file_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CAddDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CAddDirectory, parent_id_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CAddDirectory, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CDeleteDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CDeleteDirectory, directory_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CModifyUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CModifyUser, type_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::CModifyUser, content_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SyncCloudDrive::CRegister)},
  { 8, -1, -1, sizeof(::SyncCloudDrive::CLogin)},
  { 16, -1, -1, sizeof(::SyncCloudDrive::CUploadFile)},
  { 27, -1, -1, sizeof(::SyncCloudDrive::CDownLoad)},
  { 35, -1, -1, sizeof(::SyncCloudDrive::CUploadData)},
  { 45, -1, -1, sizeof(::SyncCloudDrive::CDeleteFile)},
  { 52, -1, -1, sizeof(::SyncCloudDrive::CAddDirectory)},
  { 60, -1, -1, sizeof(::SyncCloudDrive::CDeleteDirectory)},
  { 67, -1, -1, sizeof(::SyncCloudDrive::CModifyUser)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SyncCloudDrive::_CRegister_default_instance_._instance,
  &::SyncCloudDrive::_CLogin_default_instance_._instance,
  &::SyncCloudDrive::_CUploadFile_default_instance_._instance,
  &::SyncCloudDrive::_CDownLoad_default_instance_._instance,
  &::SyncCloudDrive::_CUploadData_default_instance_._instance,
  &::SyncCloudDrive::_CDeleteFile_default_instance_._instance,
  &::SyncCloudDrive::_CAddDirectory_default_instance_._instance,
  &::SyncCloudDrive::_CDeleteDirectory_default_instance_._instance,
  &::SyncCloudDrive::_CModifyUser_default_instance_._instance,
};

const char descriptor_table_protodef_client_5fto_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026client_to_server.proto\022\016SyncCloudDrive"
  "\"/\n\tCRegister\022\014\n\004name\030\001 \001(\t\022\024\n\014password_"
  "md5\030\002 \001(\t\",\n\006CLogin\022\014\n\004name\030\001 \001(\t\022\024\n\014pas"
  "sword_md5\030\002 \001(\t\"U\n\013CUploadFile\022\013\n\003md5\030\001 "
  "\001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004size\030\003 \001(\005\022\021\n\tparen"
  "t_id\030\004 \001(\t\022\n\n\002no\030\005 \001(\005\".\n\tCDownLoad\022\017\n\007f"
  "ile_id\030\001 \001(\t\022\020\n\010slide_no\030\002 \001(\005\"F\n\013CUploa"
  "dData\022\013\n\003md5\030\001 \001(\t\022\020\n\010slide_no\030\002 \001(\005\022\014\n\004"
  "data\030\003 \001(\t\022\n\n\002no\030\004 \001(\005\"\036\n\013CDeleteFile\022\017\n"
  "\007file_id\030\001 \001(\t\"0\n\rCAddDirectory\022\021\n\tparen"
  "t_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"(\n\020CDeleteDirec"
  "tory\022\024\n\014directory_id\030\001 \001(\t\",\n\013CModifyUse"
  "r\022\014\n\004type\030\001 \001(\005\022\017\n\007content\030\002 \001(\t*\305\001\n\021Cli"
  "entCommandType\022\016\n\nC_REGISTER\020\000\022\013\n\007C_LOGI"
  "N\020\001\022\n\n\006C_SYNC\020\002\022\021\n\rC_UPLOAD_FILE\020\003\022\016\n\nC_"
  "DOWNLOAD\020\004\022\021\n\rC_UPLOAD_DATA\020\005\022\021\n\rC_DELET"
  "E_FILE\020\006\022\023\n\017C_ADD_DIRECTORY\020\007\022\026\n\022C_DELET"
  "E_DIRECTORY\020\010\022\021\n\rC_MODIFY_USER\020\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_client_5fto_5fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_client_5fto_5fserver_2eproto = {
    false, false, 720, descriptor_table_protodef_client_5fto_5fserver_2eproto,
    "client_to_server.proto",
    &descriptor_table_client_5fto_5fserver_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_client_5fto_5fserver_2eproto::offsets,
    file_level_metadata_client_5fto_5fserver_2eproto, file_level_enum_descriptors_client_5fto_5fserver_2eproto,
    file_level_service_descriptors_client_5fto_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_client_5fto_5fserver_2eproto_getter() {
  return &descriptor_table_client_5fto_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_client_5fto_5fserver_2eproto(&descriptor_table_client_5fto_5fserver_2eproto);
namespace SyncCloudDrive {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fto_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fto_5fserver_2eproto[0];
}
bool ClientCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CRegister::_Internal {
 public:
};

CRegister::CRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.CRegister)
}
CRegister::CRegister(const CRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  password_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password_md5().empty()) {
    password_md5_.Set(from._internal_password_md5(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.CRegister)
}

inline void CRegister::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_md5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_md5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CRegister::~CRegister() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.CRegister)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  password_md5_.Destroy();
}

void CRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.CRegister)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  password_md5_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRegister::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CRegister.name"));
        } else
          goto handle_unusual;
        continue;
      // string password_md5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CRegister.password_md5"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRegister::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.CRegister)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CRegister.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_md5().data(), static_cast<int>(this->_internal_password_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CRegister.password_md5");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.CRegister)
  return target;
}

size_t CRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.CRegister)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_md5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRegister::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRegister::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRegister::GetClassData() const { return &_class_data_; }

void CRegister::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRegister *>(to)->MergeFrom(
      static_cast<const CRegister &>(from));
}


void CRegister::MergeFrom(const CRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.CRegister)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_password_md5().empty()) {
    _internal_set_password_md5(from._internal_password_md5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRegister::CopyFrom(const CRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.CRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRegister::IsInitialized() const {
  return true;
}

void CRegister::InternalSwap(CRegister* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &password_md5_, lhs_arena,
      &other->password_md5_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CRegister::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fto_5fserver_2eproto_getter, &descriptor_table_client_5fto_5fserver_2eproto_once,
      file_level_metadata_client_5fto_5fserver_2eproto[0]);
}

// ===================================================================

class CLogin::_Internal {
 public:
};

CLogin::CLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.CLogin)
}
CLogin::CLogin(const CLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  password_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password_md5().empty()) {
    password_md5_.Set(from._internal_password_md5(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.CLogin)
}

inline void CLogin::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_md5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_md5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CLogin::~CLogin() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.CLogin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  password_md5_.Destroy();
}

void CLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.CLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  password_md5_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLogin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CLogin.name"));
        } else
          goto handle_unusual;
        continue;
      // string password_md5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CLogin.password_md5"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.CLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CLogin.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_md5().data(), static_cast<int>(this->_internal_password_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CLogin.password_md5");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.CLogin)
  return target;
}

size_t CLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.CLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_md5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLogin::GetClassData() const { return &_class_data_; }

void CLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CLogin *>(to)->MergeFrom(
      static_cast<const CLogin &>(from));
}


void CLogin::MergeFrom(const CLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.CLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_password_md5().empty()) {
    _internal_set_password_md5(from._internal_password_md5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLogin::CopyFrom(const CLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.CLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLogin::IsInitialized() const {
  return true;
}

void CLogin::InternalSwap(CLogin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &password_md5_, lhs_arena,
      &other->password_md5_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CLogin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fto_5fserver_2eproto_getter, &descriptor_table_client_5fto_5fserver_2eproto_once,
      file_level_metadata_client_5fto_5fserver_2eproto[1]);
}

// ===================================================================

class CUploadFile::_Internal {
 public:
};

CUploadFile::CUploadFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.CUploadFile)
}
CUploadFile::CUploadFile(const CUploadFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5().empty()) {
    md5_.Set(from._internal_md5(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  parent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_id().empty()) {
    parent_id_.Set(from._internal_parent_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_) -
    reinterpret_cast<char*>(&size_)) + sizeof(no_));
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.CUploadFile)
}

inline void CUploadFile::SharedCtor() {
md5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  md5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&no_) -
    reinterpret_cast<char*>(&size_)) + sizeof(no_));
}

CUploadFile::~CUploadFile() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.CUploadFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CUploadFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  md5_.Destroy();
  name_.Destroy();
  parent_id_.Destroy();
}

void CUploadFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUploadFile::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.CUploadFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  md5_.ClearToEmpty();
  name_.ClearToEmpty();
  parent_id_.ClearToEmpty();
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_) -
      reinterpret_cast<char*>(&size_)) + sizeof(no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUploadFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string md5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CUploadFile.md5"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CUploadFile.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string parent_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_parent_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CUploadFile.parent_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 no = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CUploadFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.CUploadFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string md5 = 1;
  if (!this->_internal_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CUploadFile.md5");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_md5(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CUploadFile.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  // string parent_id = 4;
  if (!this->_internal_parent_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_id().data(), static_cast<int>(this->_internal_parent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CUploadFile.parent_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_parent_id(), target);
  }

  // int32 no = 5;
  if (this->_internal_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.CUploadFile)
  return target;
}

size_t CUploadFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.CUploadFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string md5 = 1;
  if (!this->_internal_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string parent_id = 4;
  if (!this->_internal_parent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_id());
  }

  // int32 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  // int32 no = 5;
  if (this->_internal_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CUploadFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CUploadFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CUploadFile::GetClassData() const { return &_class_data_; }

void CUploadFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CUploadFile *>(to)->MergeFrom(
      static_cast<const CUploadFile &>(from));
}


void CUploadFile::MergeFrom(const CUploadFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.CUploadFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_md5().empty()) {
    _internal_set_md5(from._internal_md5());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_parent_id().empty()) {
    _internal_set_parent_id(from._internal_parent_id());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_no() != 0) {
    _internal_set_no(from._internal_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CUploadFile::CopyFrom(const CUploadFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.CUploadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUploadFile::IsInitialized() const {
  return true;
}

void CUploadFile::InternalSwap(CUploadFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &md5_, lhs_arena,
      &other->md5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &parent_id_, lhs_arena,
      &other->parent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUploadFile, no_)
      + sizeof(CUploadFile::no_)
      - PROTOBUF_FIELD_OFFSET(CUploadFile, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUploadFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fto_5fserver_2eproto_getter, &descriptor_table_client_5fto_5fserver_2eproto_once,
      file_level_metadata_client_5fto_5fserver_2eproto[2]);
}

// ===================================================================

class CDownLoad::_Internal {
 public:
};

CDownLoad::CDownLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.CDownLoad)
}
CDownLoad::CDownLoad(const CDownLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_id().empty()) {
    file_id_.Set(from._internal_file_id(), 
      GetArenaForAllocation());
  }
  slide_no_ = from.slide_no_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.CDownLoad)
}

inline void CDownLoad::SharedCtor() {
file_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
slide_no_ = 0;
}

CDownLoad::~CDownLoad() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.CDownLoad)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDownLoad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_id_.Destroy();
}

void CDownLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDownLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.CDownLoad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_id_.ClearToEmpty();
  slide_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDownLoad::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CDownLoad.file_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 slide_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slide_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDownLoad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.CDownLoad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (!this->_internal_file_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CDownLoad.file_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_id(), target);
  }

  // int32 slide_no = 2;
  if (this->_internal_slide_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_slide_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.CDownLoad)
  return target;
}

size_t CDownLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.CDownLoad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_id = 1;
  if (!this->_internal_file_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_id());
  }

  // int32 slide_no = 2;
  if (this->_internal_slide_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slide_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDownLoad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDownLoad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDownLoad::GetClassData() const { return &_class_data_; }

void CDownLoad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDownLoad *>(to)->MergeFrom(
      static_cast<const CDownLoad &>(from));
}


void CDownLoad::MergeFrom(const CDownLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.CDownLoad)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_id().empty()) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (from._internal_slide_no() != 0) {
    _internal_set_slide_no(from._internal_slide_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDownLoad::CopyFrom(const CDownLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.CDownLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDownLoad::IsInitialized() const {
  return true;
}

void CDownLoad::InternalSwap(CDownLoad* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_id_, lhs_arena,
      &other->file_id_, rhs_arena
  );
  swap(slide_no_, other->slide_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDownLoad::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fto_5fserver_2eproto_getter, &descriptor_table_client_5fto_5fserver_2eproto_once,
      file_level_metadata_client_5fto_5fserver_2eproto[3]);
}

// ===================================================================

class CUploadData::_Internal {
 public:
};

CUploadData::CUploadData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.CUploadData)
}
CUploadData::CUploadData(const CUploadData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5().empty()) {
    md5_.Set(from._internal_md5(), 
      GetArenaForAllocation());
  }
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&slide_no_, &from.slide_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_) -
    reinterpret_cast<char*>(&slide_no_)) + sizeof(no_));
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.CUploadData)
}

inline void CUploadData::SharedCtor() {
md5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  md5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slide_no_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&no_) -
    reinterpret_cast<char*>(&slide_no_)) + sizeof(no_));
}

CUploadData::~CUploadData() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.CUploadData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CUploadData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  md5_.Destroy();
  data_.Destroy();
}

void CUploadData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUploadData::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.CUploadData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  md5_.ClearToEmpty();
  data_.ClearToEmpty();
  ::memset(&slide_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_) -
      reinterpret_cast<char*>(&slide_no_)) + sizeof(no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUploadData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string md5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CUploadData.md5"));
        } else
          goto handle_unusual;
        continue;
      // int32 slide_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slide_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CUploadData.data"));
        } else
          goto handle_unusual;
        continue;
      // int32 no = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CUploadData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.CUploadData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string md5 = 1;
  if (!this->_internal_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CUploadData.md5");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_md5(), target);
  }

  // int32 slide_no = 2;
  if (this->_internal_slide_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_slide_no(), target);
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CUploadData.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  // int32 no = 4;
  if (this->_internal_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.CUploadData)
  return target;
}

size_t CUploadData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.CUploadData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string md5 = 1;
  if (!this->_internal_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int32 slide_no = 2;
  if (this->_internal_slide_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slide_no());
  }

  // int32 no = 4;
  if (this->_internal_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CUploadData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CUploadData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CUploadData::GetClassData() const { return &_class_data_; }

void CUploadData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CUploadData *>(to)->MergeFrom(
      static_cast<const CUploadData &>(from));
}


void CUploadData::MergeFrom(const CUploadData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.CUploadData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_md5().empty()) {
    _internal_set_md5(from._internal_md5());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_slide_no() != 0) {
    _internal_set_slide_no(from._internal_slide_no());
  }
  if (from._internal_no() != 0) {
    _internal_set_no(from._internal_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CUploadData::CopyFrom(const CUploadData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.CUploadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUploadData::IsInitialized() const {
  return true;
}

void CUploadData::InternalSwap(CUploadData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &md5_, lhs_arena,
      &other->md5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CUploadData, no_)
      + sizeof(CUploadData::no_)
      - PROTOBUF_FIELD_OFFSET(CUploadData, slide_no_)>(
          reinterpret_cast<char*>(&slide_no_),
          reinterpret_cast<char*>(&other->slide_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CUploadData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fto_5fserver_2eproto_getter, &descriptor_table_client_5fto_5fserver_2eproto_once,
      file_level_metadata_client_5fto_5fserver_2eproto[4]);
}

// ===================================================================

class CDeleteFile::_Internal {
 public:
};

CDeleteFile::CDeleteFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.CDeleteFile)
}
CDeleteFile::CDeleteFile(const CDeleteFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_id().empty()) {
    file_id_.Set(from._internal_file_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.CDeleteFile)
}

inline void CDeleteFile::SharedCtor() {
file_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDeleteFile::~CDeleteFile() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.CDeleteFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDeleteFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_id_.Destroy();
}

void CDeleteFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeleteFile::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.CDeleteFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeleteFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CDeleteFile.file_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDeleteFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.CDeleteFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (!this->_internal_file_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CDeleteFile.file_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.CDeleteFile)
  return target;
}

size_t CDeleteFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.CDeleteFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_id = 1;
  if (!this->_internal_file_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDeleteFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDeleteFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDeleteFile::GetClassData() const { return &_class_data_; }

void CDeleteFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDeleteFile *>(to)->MergeFrom(
      static_cast<const CDeleteFile &>(from));
}


void CDeleteFile::MergeFrom(const CDeleteFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.CDeleteFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_id().empty()) {
    _internal_set_file_id(from._internal_file_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDeleteFile::CopyFrom(const CDeleteFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.CDeleteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeleteFile::IsInitialized() const {
  return true;
}

void CDeleteFile::InternalSwap(CDeleteFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_id_, lhs_arena,
      &other->file_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeleteFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fto_5fserver_2eproto_getter, &descriptor_table_client_5fto_5fserver_2eproto_once,
      file_level_metadata_client_5fto_5fserver_2eproto[5]);
}

// ===================================================================

class CAddDirectory::_Internal {
 public:
};

CAddDirectory::CAddDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.CAddDirectory)
}
CAddDirectory::CAddDirectory(const CAddDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_id().empty()) {
    parent_id_.Set(from._internal_parent_id(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.CAddDirectory)
}

inline void CAddDirectory::SharedCtor() {
parent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CAddDirectory::~CAddDirectory() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.CAddDirectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CAddDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_id_.Destroy();
  name_.Destroy();
}

void CAddDirectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAddDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.CAddDirectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_id_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAddDirectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CAddDirectory.parent_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CAddDirectory.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAddDirectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.CAddDirectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent_id = 1;
  if (!this->_internal_parent_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_id().data(), static_cast<int>(this->_internal_parent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CAddDirectory.parent_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CAddDirectory.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.CAddDirectory)
  return target;
}

size_t CAddDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.CAddDirectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent_id = 1;
  if (!this->_internal_parent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAddDirectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CAddDirectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAddDirectory::GetClassData() const { return &_class_data_; }

void CAddDirectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CAddDirectory *>(to)->MergeFrom(
      static_cast<const CAddDirectory &>(from));
}


void CAddDirectory::MergeFrom(const CAddDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.CAddDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent_id().empty()) {
    _internal_set_parent_id(from._internal_parent_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAddDirectory::CopyFrom(const CAddDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.CAddDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAddDirectory::IsInitialized() const {
  return true;
}

void CAddDirectory::InternalSwap(CAddDirectory* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &parent_id_, lhs_arena,
      &other->parent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CAddDirectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fto_5fserver_2eproto_getter, &descriptor_table_client_5fto_5fserver_2eproto_once,
      file_level_metadata_client_5fto_5fserver_2eproto[6]);
}

// ===================================================================

class CDeleteDirectory::_Internal {
 public:
};

CDeleteDirectory::CDeleteDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.CDeleteDirectory)
}
CDeleteDirectory::CDeleteDirectory(const CDeleteDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  directory_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    directory_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_directory_id().empty()) {
    directory_id_.Set(from._internal_directory_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.CDeleteDirectory)
}

inline void CDeleteDirectory::SharedCtor() {
directory_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  directory_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDeleteDirectory::~CDeleteDirectory() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.CDeleteDirectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDeleteDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  directory_id_.Destroy();
}

void CDeleteDirectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDeleteDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.CDeleteDirectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDeleteDirectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string directory_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_directory_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CDeleteDirectory.directory_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDeleteDirectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.CDeleteDirectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory_id = 1;
  if (!this->_internal_directory_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory_id().data(), static_cast<int>(this->_internal_directory_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CDeleteDirectory.directory_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.CDeleteDirectory)
  return target;
}

size_t CDeleteDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.CDeleteDirectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string directory_id = 1;
  if (!this->_internal_directory_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDeleteDirectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDeleteDirectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDeleteDirectory::GetClassData() const { return &_class_data_; }

void CDeleteDirectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDeleteDirectory *>(to)->MergeFrom(
      static_cast<const CDeleteDirectory &>(from));
}


void CDeleteDirectory::MergeFrom(const CDeleteDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.CDeleteDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_directory_id().empty()) {
    _internal_set_directory_id(from._internal_directory_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDeleteDirectory::CopyFrom(const CDeleteDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.CDeleteDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeleteDirectory::IsInitialized() const {
  return true;
}

void CDeleteDirectory::InternalSwap(CDeleteDirectory* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &directory_id_, lhs_arena,
      &other->directory_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CDeleteDirectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fto_5fserver_2eproto_getter, &descriptor_table_client_5fto_5fserver_2eproto_once,
      file_level_metadata_client_5fto_5fserver_2eproto[7]);
}

// ===================================================================

class CModifyUser::_Internal {
 public:
};

CModifyUser::CModifyUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.CModifyUser)
}
CModifyUser::CModifyUser(const CModifyUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.CModifyUser)
}

inline void CModifyUser::SharedCtor() {
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

CModifyUser::~CModifyUser() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.CModifyUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CModifyUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.Destroy();
}

void CModifyUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CModifyUser::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.CModifyUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CModifyUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.CModifyUser.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CModifyUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.CModifyUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.CModifyUser.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.CModifyUser)
  return target;
}

size_t CModifyUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.CModifyUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CModifyUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CModifyUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CModifyUser::GetClassData() const { return &_class_data_; }

void CModifyUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CModifyUser *>(to)->MergeFrom(
      static_cast<const CModifyUser &>(from));
}


void CModifyUser::MergeFrom(const CModifyUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.CModifyUser)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CModifyUser::CopyFrom(const CModifyUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.CModifyUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CModifyUser::IsInitialized() const {
  return true;
}

void CModifyUser::InternalSwap(CModifyUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CModifyUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fto_5fserver_2eproto_getter, &descriptor_table_client_5fto_5fserver_2eproto_once,
      file_level_metadata_client_5fto_5fserver_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SyncCloudDrive
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::CRegister*
Arena::CreateMaybeMessage< ::SyncCloudDrive::CRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::CRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::CLogin*
Arena::CreateMaybeMessage< ::SyncCloudDrive::CLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::CLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::CUploadFile*
Arena::CreateMaybeMessage< ::SyncCloudDrive::CUploadFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::CUploadFile >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::CDownLoad*
Arena::CreateMaybeMessage< ::SyncCloudDrive::CDownLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::CDownLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::CUploadData*
Arena::CreateMaybeMessage< ::SyncCloudDrive::CUploadData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::CUploadData >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::CDeleteFile*
Arena::CreateMaybeMessage< ::SyncCloudDrive::CDeleteFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::CDeleteFile >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::CAddDirectory*
Arena::CreateMaybeMessage< ::SyncCloudDrive::CAddDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::CAddDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::CDeleteDirectory*
Arena::CreateMaybeMessage< ::SyncCloudDrive::CDeleteDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::CDeleteDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::CModifyUser*
Arena::CreateMaybeMessage< ::SyncCloudDrive::CModifyUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::CModifyUser >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
