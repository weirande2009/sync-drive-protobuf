// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_proto/client_to_server_frontend.proto

#include "frontend_proto/client_to_server_frontend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SyncCloudDriveFrontend {
PROTOBUF_CONSTEXPR CRegister::CRegister(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , password_md5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CRegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CRegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CRegisterDefaultTypeInternal() {}
  union {
    CRegister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CRegisterDefaultTypeInternal _CRegister_default_instance_;
PROTOBUF_CONSTEXPR CLogin::CLogin(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , password_md5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CLoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLoginDefaultTypeInternal() {}
  union {
    CLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLoginDefaultTypeInternal _CLogin_default_instance_;
PROTOBUF_CONSTEXPR CStart::CStart(
    ::_pbi::ConstantInitialized)
  : sync_directory_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CStartDefaultTypeInternal() {}
  union {
    CStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CStartDefaultTypeInternal _CStart_default_instance_;
PROTOBUF_CONSTEXPR CModifyUser::CModifyUser(
    ::_pbi::ConstantInitialized)
  : content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0){}
struct CModifyUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CModifyUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CModifyUserDefaultTypeInternal() {}
  union {
    CModifyUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CModifyUserDefaultTypeInternal _CModifyUser_default_instance_;
}  // namespace SyncCloudDriveFrontend
static ::_pb::Metadata file_level_metadata_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto = nullptr;

const uint32_t TableStruct_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::CRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::CRegister, name_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::CRegister, password_md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::CLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::CLogin, name_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::CLogin, password_md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::CStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::CStart, sync_directory_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::CModifyUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::CModifyUser, type_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::CModifyUser, content_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SyncCloudDriveFrontend::CRegister)},
  { 8, -1, -1, sizeof(::SyncCloudDriveFrontend::CLogin)},
  { 16, -1, -1, sizeof(::SyncCloudDriveFrontend::CStart)},
  { 23, -1, -1, sizeof(::SyncCloudDriveFrontend::CModifyUser)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SyncCloudDriveFrontend::_CRegister_default_instance_._instance,
  &::SyncCloudDriveFrontend::_CLogin_default_instance_._instance,
  &::SyncCloudDriveFrontend::_CStart_default_instance_._instance,
  &::SyncCloudDriveFrontend::_CModifyUser_default_instance_._instance,
};

const char descriptor_table_protodef_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.frontend_proto/client_to_server_fronte"
  "nd.proto\022\026SyncCloudDriveFrontend\"/\n\tCReg"
  "ister\022\014\n\004name\030\001 \001(\t\022\024\n\014password_md5\030\002 \001("
  "\t\",\n\006CLogin\022\014\n\004name\030\001 \001(\t\022\024\n\014password_md"
  "5\030\002 \001(\t\"%\n\006CStart\022\033\n\023sync_directory_path"
  "\030\001 \001(\t\",\n\013CModifyUser\022\014\n\004type\030\001 \001(\005\022\017\n\007c"
  "ontent\030\002 \001(\t*[\n\021ClientCommandType\022\016\n\nC_R"
  "EGISTER\020\000\022\013\n\007C_LOGIN\020\001\022\013\n\007C_START\020\002\022\t\n\005C"
  "_END\020\003\022\021\n\rC_MODIFY_USER\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto = {
    false, false, 353, descriptor_table_protodef_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto,
    "frontend_proto/client_to_server_frontend.proto",
    &descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto::offsets,
    file_level_metadata_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto, file_level_enum_descriptors_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto,
    file_level_service_descriptors_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto_getter() {
  return &descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto(&descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto);
namespace SyncCloudDriveFrontend {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto);
  return file_level_enum_descriptors_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto[0];
}
bool ClientCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CRegister::_Internal {
 public:
};

CRegister::CRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDriveFrontend.CRegister)
}
CRegister::CRegister(const CRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  password_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password_md5().empty()) {
    password_md5_.Set(from._internal_password_md5(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDriveFrontend.CRegister)
}

inline void CRegister::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_md5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_md5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CRegister::~CRegister() {
  // @@protoc_insertion_point(destructor:SyncCloudDriveFrontend.CRegister)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  password_md5_.Destroy();
}

void CRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDriveFrontend.CRegister)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  password_md5_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CRegister::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDriveFrontend.CRegister.name"));
        } else
          goto handle_unusual;
        continue;
      // string password_md5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDriveFrontend.CRegister.password_md5"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CRegister::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDriveFrontend.CRegister)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDriveFrontend.CRegister.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_md5().data(), static_cast<int>(this->_internal_password_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDriveFrontend.CRegister.password_md5");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDriveFrontend.CRegister)
  return target;
}

size_t CRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDriveFrontend.CRegister)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_md5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CRegister::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CRegister::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CRegister::GetClassData() const { return &_class_data_; }

void CRegister::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CRegister *>(to)->MergeFrom(
      static_cast<const CRegister &>(from));
}


void CRegister::MergeFrom(const CRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDriveFrontend.CRegister)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_password_md5().empty()) {
    _internal_set_password_md5(from._internal_password_md5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CRegister::CopyFrom(const CRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDriveFrontend.CRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRegister::IsInitialized() const {
  return true;
}

void CRegister::InternalSwap(CRegister* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &password_md5_, lhs_arena,
      &other->password_md5_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CRegister::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto_getter, &descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto_once,
      file_level_metadata_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto[0]);
}

// ===================================================================

class CLogin::_Internal {
 public:
};

CLogin::CLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDriveFrontend.CLogin)
}
CLogin::CLogin(const CLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  password_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password_md5().empty()) {
    password_md5_.Set(from._internal_password_md5(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDriveFrontend.CLogin)
}

inline void CLogin::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_md5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_md5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CLogin::~CLogin() {
  // @@protoc_insertion_point(destructor:SyncCloudDriveFrontend.CLogin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  password_md5_.Destroy();
}

void CLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDriveFrontend.CLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  password_md5_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLogin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDriveFrontend.CLogin.name"));
        } else
          goto handle_unusual;
        continue;
      // string password_md5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDriveFrontend.CLogin.password_md5"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDriveFrontend.CLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDriveFrontend.CLogin.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_md5().data(), static_cast<int>(this->_internal_password_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDriveFrontend.CLogin.password_md5");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDriveFrontend.CLogin)
  return target;
}

size_t CLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDriveFrontend.CLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_md5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLogin::GetClassData() const { return &_class_data_; }

void CLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CLogin *>(to)->MergeFrom(
      static_cast<const CLogin &>(from));
}


void CLogin::MergeFrom(const CLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDriveFrontend.CLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_password_md5().empty()) {
    _internal_set_password_md5(from._internal_password_md5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLogin::CopyFrom(const CLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDriveFrontend.CLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLogin::IsInitialized() const {
  return true;
}

void CLogin::InternalSwap(CLogin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &password_md5_, lhs_arena,
      &other->password_md5_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CLogin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto_getter, &descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto_once,
      file_level_metadata_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto[1]);
}

// ===================================================================

class CStart::_Internal {
 public:
};

CStart::CStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDriveFrontend.CStart)
}
CStart::CStart(const CStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sync_directory_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sync_directory_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sync_directory_path().empty()) {
    sync_directory_path_.Set(from._internal_sync_directory_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDriveFrontend.CStart)
}

inline void CStart::SharedCtor() {
sync_directory_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sync_directory_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CStart::~CStart() {
  // @@protoc_insertion_point(destructor:SyncCloudDriveFrontend.CStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sync_directory_path_.Destroy();
}

void CStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CStart::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDriveFrontend.CStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sync_directory_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sync_directory_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sync_directory_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDriveFrontend.CStart.sync_directory_path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDriveFrontend.CStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sync_directory_path = 1;
  if (!this->_internal_sync_directory_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sync_directory_path().data(), static_cast<int>(this->_internal_sync_directory_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDriveFrontend.CStart.sync_directory_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sync_directory_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDriveFrontend.CStart)
  return target;
}

size_t CStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDriveFrontend.CStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sync_directory_path = 1;
  if (!this->_internal_sync_directory_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sync_directory_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CStart::GetClassData() const { return &_class_data_; }

void CStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CStart *>(to)->MergeFrom(
      static_cast<const CStart &>(from));
}


void CStart::MergeFrom(const CStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDriveFrontend.CStart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sync_directory_path().empty()) {
    _internal_set_sync_directory_path(from._internal_sync_directory_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CStart::CopyFrom(const CStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDriveFrontend.CStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CStart::IsInitialized() const {
  return true;
}

void CStart::InternalSwap(CStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sync_directory_path_, lhs_arena,
      &other->sync_directory_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto_getter, &descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto_once,
      file_level_metadata_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto[2]);
}

// ===================================================================

class CModifyUser::_Internal {
 public:
};

CModifyUser::CModifyUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDriveFrontend.CModifyUser)
}
CModifyUser::CModifyUser(const CModifyUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDriveFrontend.CModifyUser)
}

inline void CModifyUser::SharedCtor() {
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

CModifyUser::~CModifyUser() {
  // @@protoc_insertion_point(destructor:SyncCloudDriveFrontend.CModifyUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CModifyUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.Destroy();
}

void CModifyUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CModifyUser::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDriveFrontend.CModifyUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CModifyUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDriveFrontend.CModifyUser.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CModifyUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDriveFrontend.CModifyUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDriveFrontend.CModifyUser.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDriveFrontend.CModifyUser)
  return target;
}

size_t CModifyUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDriveFrontend.CModifyUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CModifyUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CModifyUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CModifyUser::GetClassData() const { return &_class_data_; }

void CModifyUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CModifyUser *>(to)->MergeFrom(
      static_cast<const CModifyUser &>(from));
}


void CModifyUser::MergeFrom(const CModifyUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDriveFrontend.CModifyUser)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CModifyUser::CopyFrom(const CModifyUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDriveFrontend.CModifyUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CModifyUser::IsInitialized() const {
  return true;
}

void CModifyUser::InternalSwap(CModifyUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CModifyUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto_getter, &descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto_once,
      file_level_metadata_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SyncCloudDriveFrontend
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SyncCloudDriveFrontend::CRegister*
Arena::CreateMaybeMessage< ::SyncCloudDriveFrontend::CRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDriveFrontend::CRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDriveFrontend::CLogin*
Arena::CreateMaybeMessage< ::SyncCloudDriveFrontend::CLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDriveFrontend::CLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDriveFrontend::CStart*
Arena::CreateMaybeMessage< ::SyncCloudDriveFrontend::CStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDriveFrontend::CStart >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDriveFrontend::CModifyUser*
Arena::CreateMaybeMessage< ::SyncCloudDriveFrontend::CModifyUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDriveFrontend::CModifyUser >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
