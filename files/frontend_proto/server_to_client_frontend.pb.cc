// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_proto/server_to_client_frontend.proto

#include "frontend_proto/server_to_client_frontend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SyncCloudDriveFrontend {
PROTOBUF_CONSTEXPR SRegister::SRegister(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct SRegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SRegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SRegisterDefaultTypeInternal() {}
  union {
    SRegister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SRegisterDefaultTypeInternal _SRegister_default_instance_;
PROTOBUF_CONSTEXPR SLogin::SLogin(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct SLoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SLoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SLoginDefaultTypeInternal() {}
  union {
    SLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SLoginDefaultTypeInternal _SLogin_default_instance_;
PROTOBUF_CONSTEXPR SStart::SStart(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct SStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SStartDefaultTypeInternal() {}
  union {
    SStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SStartDefaultTypeInternal _SStart_default_instance_;
PROTOBUF_CONSTEXPR SEnd::SEnd(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct SEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SEndDefaultTypeInternal() {}
  union {
    SEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SEndDefaultTypeInternal _SEnd_default_instance_;
PROTOBUF_CONSTEXPR SModifyUser::SModifyUser(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct SModifyUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SModifyUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SModifyUserDefaultTypeInternal() {}
  union {
    SModifyUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SModifyUserDefaultTypeInternal _SModifyUser_default_instance_;
}  // namespace SyncCloudDriveFrontend
static ::_pb::Metadata file_level_metadata_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto = nullptr;

const uint32_t TableStruct_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::SRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::SRegister, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::SLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::SLogin, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::SStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::SStart, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::SEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::SEnd, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::SModifyUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDriveFrontend::SModifyUser, state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SyncCloudDriveFrontend::SRegister)},
  { 7, -1, -1, sizeof(::SyncCloudDriveFrontend::SLogin)},
  { 14, -1, -1, sizeof(::SyncCloudDriveFrontend::SStart)},
  { 21, -1, -1, sizeof(::SyncCloudDriveFrontend::SEnd)},
  { 28, -1, -1, sizeof(::SyncCloudDriveFrontend::SModifyUser)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SyncCloudDriveFrontend::_SRegister_default_instance_._instance,
  &::SyncCloudDriveFrontend::_SLogin_default_instance_._instance,
  &::SyncCloudDriveFrontend::_SStart_default_instance_._instance,
  &::SyncCloudDriveFrontend::_SEnd_default_instance_._instance,
  &::SyncCloudDriveFrontend::_SModifyUser_default_instance_._instance,
};

const char descriptor_table_protodef_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.frontend_proto/server_to_client_fronte"
  "nd.proto\022\026SyncCloudDriveFrontend\"\032\n\tSReg"
  "ister\022\r\n\005state\030\001 \001(\005\"\027\n\006SLogin\022\r\n\005state\030"
  "\001 \001(\005\"\027\n\006SStart\022\r\n\005state\030\001 \001(\005\"\025\n\004SEnd\022\r"
  "\n\005state\030\001 \001(\005\"\034\n\013SModifyUser\022\r\n\005state\030\001 "
  "\001(\005*[\n\021ServerCommandType\022\016\n\nS_REGISTER\020\000"
  "\022\013\n\007S_LOGIN\020\001\022\013\n\007S_START\020\002\022\t\n\005S_END\020\003\022\021\n"
  "\rS_MODIFY_USER\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto = {
    false, false, 304, descriptor_table_protodef_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto,
    "frontend_proto/server_to_client_frontend.proto",
    &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto::offsets,
    file_level_metadata_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto, file_level_enum_descriptors_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto,
    file_level_service_descriptors_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_getter() {
  return &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto(&descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto);
namespace SyncCloudDriveFrontend {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto);
  return file_level_enum_descriptors_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto[0];
}
bool ServerCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SRegister::_Internal {
 public:
};

SRegister::SRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDriveFrontend.SRegister)
}
SRegister::SRegister(const SRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDriveFrontend.SRegister)
}

inline void SRegister::SharedCtor() {
state_ = 0;
}

SRegister::~SRegister() {
  // @@protoc_insertion_point(destructor:SyncCloudDriveFrontend.SRegister)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDriveFrontend.SRegister)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRegister::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SRegister::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDriveFrontend.SRegister)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDriveFrontend.SRegister)
  return target;
}

size_t SRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDriveFrontend.SRegister)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SRegister::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SRegister::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SRegister::GetClassData() const { return &_class_data_; }

void SRegister::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SRegister *>(to)->MergeFrom(
      static_cast<const SRegister &>(from));
}


void SRegister::MergeFrom(const SRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDriveFrontend.SRegister)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SRegister::CopyFrom(const SRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDriveFrontend.SRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRegister::IsInitialized() const {
  return true;
}

void SRegister::InternalSwap(SRegister* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRegister::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_getter, &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_once,
      file_level_metadata_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto[0]);
}

// ===================================================================

class SLogin::_Internal {
 public:
};

SLogin::SLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDriveFrontend.SLogin)
}
SLogin::SLogin(const SLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDriveFrontend.SLogin)
}

inline void SLogin::SharedCtor() {
state_ = 0;
}

SLogin::~SLogin() {
  // @@protoc_insertion_point(destructor:SyncCloudDriveFrontend.SLogin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDriveFrontend.SLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLogin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDriveFrontend.SLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDriveFrontend.SLogin)
  return target;
}

size_t SLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDriveFrontend.SLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLogin::GetClassData() const { return &_class_data_; }

void SLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLogin *>(to)->MergeFrom(
      static_cast<const SLogin &>(from));
}


void SLogin::MergeFrom(const SLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDriveFrontend.SLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLogin::CopyFrom(const SLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDriveFrontend.SLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLogin::IsInitialized() const {
  return true;
}

void SLogin::InternalSwap(SLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLogin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_getter, &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_once,
      file_level_metadata_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto[1]);
}

// ===================================================================

class SStart::_Internal {
 public:
};

SStart::SStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDriveFrontend.SStart)
}
SStart::SStart(const SStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDriveFrontend.SStart)
}

inline void SStart::SharedCtor() {
state_ = 0;
}

SStart::~SStart() {
  // @@protoc_insertion_point(destructor:SyncCloudDriveFrontend.SStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SStart::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDriveFrontend.SStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDriveFrontend.SStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDriveFrontend.SStart)
  return target;
}

size_t SStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDriveFrontend.SStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SStart::GetClassData() const { return &_class_data_; }

void SStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SStart *>(to)->MergeFrom(
      static_cast<const SStart &>(from));
}


void SStart::MergeFrom(const SStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDriveFrontend.SStart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SStart::CopyFrom(const SStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDriveFrontend.SStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SStart::IsInitialized() const {
  return true;
}

void SStart::InternalSwap(SStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_getter, &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_once,
      file_level_metadata_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto[2]);
}

// ===================================================================

class SEnd::_Internal {
 public:
};

SEnd::SEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDriveFrontend.SEnd)
}
SEnd::SEnd(const SEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDriveFrontend.SEnd)
}

inline void SEnd::SharedCtor() {
state_ = 0;
}

SEnd::~SEnd() {
  // @@protoc_insertion_point(destructor:SyncCloudDriveFrontend.SEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDriveFrontend.SEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDriveFrontend.SEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDriveFrontend.SEnd)
  return target;
}

size_t SEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDriveFrontend.SEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SEnd::GetClassData() const { return &_class_data_; }

void SEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SEnd *>(to)->MergeFrom(
      static_cast<const SEnd &>(from));
}


void SEnd::MergeFrom(const SEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDriveFrontend.SEnd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SEnd::CopyFrom(const SEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDriveFrontend.SEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SEnd::IsInitialized() const {
  return true;
}

void SEnd::InternalSwap(SEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_getter, &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_once,
      file_level_metadata_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto[3]);
}

// ===================================================================

class SModifyUser::_Internal {
 public:
};

SModifyUser::SModifyUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDriveFrontend.SModifyUser)
}
SModifyUser::SModifyUser(const SModifyUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDriveFrontend.SModifyUser)
}

inline void SModifyUser::SharedCtor() {
state_ = 0;
}

SModifyUser::~SModifyUser() {
  // @@protoc_insertion_point(destructor:SyncCloudDriveFrontend.SModifyUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SModifyUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SModifyUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SModifyUser::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDriveFrontend.SModifyUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SModifyUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SModifyUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDriveFrontend.SModifyUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDriveFrontend.SModifyUser)
  return target;
}

size_t SModifyUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDriveFrontend.SModifyUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SModifyUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SModifyUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SModifyUser::GetClassData() const { return &_class_data_; }

void SModifyUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SModifyUser *>(to)->MergeFrom(
      static_cast<const SModifyUser &>(from));
}


void SModifyUser::MergeFrom(const SModifyUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDriveFrontend.SModifyUser)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SModifyUser::CopyFrom(const SModifyUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDriveFrontend.SModifyUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SModifyUser::IsInitialized() const {
  return true;
}

void SModifyUser::InternalSwap(SModifyUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SModifyUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_getter, &descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto_once,
      file_level_metadata_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SyncCloudDriveFrontend
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SyncCloudDriveFrontend::SRegister*
Arena::CreateMaybeMessage< ::SyncCloudDriveFrontend::SRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDriveFrontend::SRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDriveFrontend::SLogin*
Arena::CreateMaybeMessage< ::SyncCloudDriveFrontend::SLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDriveFrontend::SLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDriveFrontend::SStart*
Arena::CreateMaybeMessage< ::SyncCloudDriveFrontend::SStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDriveFrontend::SStart >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDriveFrontend::SEnd*
Arena::CreateMaybeMessage< ::SyncCloudDriveFrontend::SEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDriveFrontend::SEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDriveFrontend::SModifyUser*
Arena::CreateMaybeMessage< ::SyncCloudDriveFrontend::SModifyUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDriveFrontend::SModifyUser >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
