// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_to_client.proto

#include "server_to_client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_server_5fto_5fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSync_Directory_server_5fto_5fclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_5fto_5fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSync_File_server_5fto_5fclient_2eproto;
namespace SyncCloudDrive {
class SRegisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRegister> _instance;
} _SRegister_default_instance_;
class SLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLogin> _instance;
} _SLogin_default_instance_;
class SSync_FileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSync_File> _instance;
} _SSync_File_default_instance_;
class SSync_DirectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSync_Directory> _instance;
} _SSync_Directory_default_instance_;
class SSyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSync> _instance;
} _SSync_default_instance_;
class SUploadFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SUploadFile> _instance;
} _SUploadFile_default_instance_;
class SDownloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDownload> _instance;
} _SDownload_default_instance_;
class SDeleteFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDeleteFile> _instance;
} _SDeleteFile_default_instance_;
class SAddDirectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAddDirectory> _instance;
} _SAddDirectory_default_instance_;
class SDeleteDirectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDeleteDirectory> _instance;
} _SDeleteDirectory_default_instance_;
class SModifyUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SModifyUser> _instance;
} _SModifyUser_default_instance_;
}  // namespace SyncCloudDrive
static void InitDefaultsscc_info_SAddDirectory_server_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SyncCloudDrive::_SAddDirectory_default_instance_;
    new (ptr) ::SyncCloudDrive::SAddDirectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAddDirectory_server_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SAddDirectory_server_5fto_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_SDeleteDirectory_server_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SyncCloudDrive::_SDeleteDirectory_default_instance_;
    new (ptr) ::SyncCloudDrive::SDeleteDirectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDeleteDirectory_server_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SDeleteDirectory_server_5fto_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_SDeleteFile_server_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SyncCloudDrive::_SDeleteFile_default_instance_;
    new (ptr) ::SyncCloudDrive::SDeleteFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDeleteFile_server_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SDeleteFile_server_5fto_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_SDownload_server_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SyncCloudDrive::_SDownload_default_instance_;
    new (ptr) ::SyncCloudDrive::SDownload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SDownload_server_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SDownload_server_5fto_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_SLogin_server_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SyncCloudDrive::_SLogin_default_instance_;
    new (ptr) ::SyncCloudDrive::SLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLogin_server_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SLogin_server_5fto_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_SModifyUser_server_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SyncCloudDrive::_SModifyUser_default_instance_;
    new (ptr) ::SyncCloudDrive::SModifyUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SModifyUser_server_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SModifyUser_server_5fto_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_SRegister_server_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SyncCloudDrive::_SRegister_default_instance_;
    new (ptr) ::SyncCloudDrive::SRegister();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SRegister_server_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SRegister_server_5fto_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_SSync_server_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SyncCloudDrive::_SSync_default_instance_;
    new (ptr) ::SyncCloudDrive::SSync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSync_server_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSync_server_5fto_5fclient_2eproto}, {
      &scc_info_SSync_Directory_server_5fto_5fclient_2eproto.base,}};

static void InitDefaultsscc_info_SSync_Directory_server_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SyncCloudDrive::_SSync_Directory_default_instance_;
    new (ptr) ::SyncCloudDrive::SSync_Directory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSync_Directory_server_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSync_Directory_server_5fto_5fclient_2eproto}, {
      &scc_info_SSync_File_server_5fto_5fclient_2eproto.base,}};

static void InitDefaultsscc_info_SSync_File_server_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SyncCloudDrive::_SSync_File_default_instance_;
    new (ptr) ::SyncCloudDrive::SSync_File();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSync_File_server_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSync_File_server_5fto_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_SUploadFile_server_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SyncCloudDrive::_SUploadFile_default_instance_;
    new (ptr) ::SyncCloudDrive::SUploadFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SUploadFile_server_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SUploadFile_server_5fto_5fclient_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_5fto_5fclient_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_5fto_5fclient_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_5fto_5fclient_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_5fto_5fclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SRegister, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SLogin, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_File, id_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_File, name_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_File, md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_Directory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_Directory, id_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_Directory, name_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_Directory, sons_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_Directory, files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync, state_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync, root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SUploadFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SUploadFile, no_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SUploadFile, slide_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDownload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDownload, file_id_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDownload, slide_no_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDownload, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDeleteFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDeleteFile, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SAddDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SAddDirectory, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDeleteDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDeleteDirectory, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SModifyUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SModifyUser, state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SyncCloudDrive::SRegister)},
  { 6, -1, sizeof(::SyncCloudDrive::SLogin)},
  { 12, -1, sizeof(::SyncCloudDrive::SSync_File)},
  { 20, -1, sizeof(::SyncCloudDrive::SSync_Directory)},
  { 29, -1, sizeof(::SyncCloudDrive::SSync)},
  { 36, -1, sizeof(::SyncCloudDrive::SUploadFile)},
  { 43, -1, sizeof(::SyncCloudDrive::SDownload)},
  { 51, -1, sizeof(::SyncCloudDrive::SDeleteFile)},
  { 57, -1, sizeof(::SyncCloudDrive::SAddDirectory)},
  { 63, -1, sizeof(::SyncCloudDrive::SDeleteDirectory)},
  { 69, -1, sizeof(::SyncCloudDrive::SModifyUser)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SyncCloudDrive::_SRegister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SyncCloudDrive::_SLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SyncCloudDrive::_SSync_File_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SyncCloudDrive::_SSync_Directory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SyncCloudDrive::_SSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SyncCloudDrive::_SUploadFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SyncCloudDrive::_SDownload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SyncCloudDrive::_SDeleteFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SyncCloudDrive::_SAddDirectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SyncCloudDrive::_SDeleteDirectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SyncCloudDrive::_SModifyUser_default_instance_),
};

const char descriptor_table_protodef_server_5fto_5fclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026server_to_client.proto\022\016SyncCloudDrive"
  "\"\032\n\tSRegister\022\r\n\005state\030\001 \001(\005\"\027\n\006SLogin\022\r"
  "\n\005state\030\001 \001(\005\"\365\001\n\005SSync\022\r\n\005state\030\001 \001(\005\022-"
  "\n\004root\030\002 \001(\0132\037.SyncCloudDrive.SSync.Dire"
  "ctory\032-\n\004File\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022"
  "\013\n\003md5\030\003 \001(\t\032\177\n\tDirectory\022\n\n\002id\030\001 \001(\t\022\014\n"
  "\004name\030\002 \001(\t\022-\n\004sons\030\003 \003(\0132\037.SyncCloudDri"
  "ve.SSync.Directory\022)\n\005files\030\004 \003(\0132\032.Sync"
  "CloudDrive.SSync.File\"+\n\013SUploadFile\022\n\n\002"
  "no\030\001 \001(\005\022\020\n\010slide_no\030\002 \001(\005\"<\n\tSDownload\022"
  "\017\n\007file_id\030\001 \001(\t\022\020\n\010slide_no\030\002 \001(\005\022\014\n\004da"
  "ta\030\003 \001(\t\"\034\n\013SDeleteFile\022\r\n\005state\030\001 \001(\005\"\036"
  "\n\rSAddDirectory\022\r\n\005state\030\001 \001(\005\"!\n\020SDelet"
  "eDirectory\022\r\n\005state\030\001 \001(\005\"\034\n\013SModifyUser"
  "\022\r\n\005state\030\001 \001(\005*\262\001\n\021ServerCommandType\022\016\n"
  "\nS_REGISTER\020\000\022\013\n\007S_LOGIN\020\001\022\n\n\006S_SYNC\020\002\022\021"
  "\n\rS_UPLOAD_FILE\020\003\022\016\n\nS_DOWNLOAD\020\004\022\021\n\rS_D"
  "ELETE_FILE\020\005\022\023\n\017S_ADD_DIRECTORY\020\006\022\026\n\022S_D"
  "ELETE_DIRECTORY\020\007\022\021\n\rS_MODIFY_USER\020\010b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_5fto_5fclient_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_5fto_5fclient_2eproto_sccs[11] = {
  &scc_info_SAddDirectory_server_5fto_5fclient_2eproto.base,
  &scc_info_SDeleteDirectory_server_5fto_5fclient_2eproto.base,
  &scc_info_SDeleteFile_server_5fto_5fclient_2eproto.base,
  &scc_info_SDownload_server_5fto_5fclient_2eproto.base,
  &scc_info_SLogin_server_5fto_5fclient_2eproto.base,
  &scc_info_SModifyUser_server_5fto_5fclient_2eproto.base,
  &scc_info_SRegister_server_5fto_5fclient_2eproto.base,
  &scc_info_SSync_server_5fto_5fclient_2eproto.base,
  &scc_info_SSync_Directory_server_5fto_5fclient_2eproto.base,
  &scc_info_SSync_File_server_5fto_5fclient_2eproto.base,
  &scc_info_SUploadFile_server_5fto_5fclient_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_5fto_5fclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fto_5fclient_2eproto = {
  false, false, descriptor_table_protodef_server_5fto_5fclient_2eproto, "server_to_client.proto", 764,
  &descriptor_table_server_5fto_5fclient_2eproto_once, descriptor_table_server_5fto_5fclient_2eproto_sccs, descriptor_table_server_5fto_5fclient_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_server_5fto_5fclient_2eproto::offsets,
  file_level_metadata_server_5fto_5fclient_2eproto, 11, file_level_enum_descriptors_server_5fto_5fclient_2eproto, file_level_service_descriptors_server_5fto_5fclient_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_5fto_5fclient_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_5fto_5fclient_2eproto)), true);
namespace SyncCloudDrive {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fto_5fclient_2eproto);
  return file_level_enum_descriptors_server_5fto_5fclient_2eproto[0];
}
bool ServerCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SRegister::_Internal {
 public:
};

SRegister::SRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SRegister)
}
SRegister::SRegister(const SRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SRegister)
}

void SRegister::SharedCtor() {
  state_ = 0;
}

SRegister::~SRegister() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SRegister)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SRegister::ArenaDtor(void* object) {
  SRegister* _this = reinterpret_cast< SRegister* >(object);
  (void)_this;
}
void SRegister::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRegister& SRegister::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRegister_server_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void SRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRegister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRegister::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SRegister)
  return target;
}

size_t SRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SRegister)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRegister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncCloudDrive.SRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const SRegister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncCloudDrive.SRegister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncCloudDrive.SRegister)
    MergeFrom(*source);
  }
}

void SRegister::MergeFrom(const SRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SRegister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncCloudDrive.SRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRegister::CopyFrom(const SRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRegister::IsInitialized() const {
  return true;
}

void SRegister::InternalSwap(SRegister* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRegister::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SLogin::_Internal {
 public:
};

SLogin::SLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SLogin)
}
SLogin::SLogin(const SLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SLogin)
}

void SLogin::SharedCtor() {
  state_ = 0;
}

SLogin::~SLogin() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SLogin::ArenaDtor(void* object) {
  SLogin* _this = reinterpret_cast< SLogin* >(object);
  (void)_this;
}
void SLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLogin& SLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLogin_server_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void SLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SLogin)
  return target;
}

size_t SLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncCloudDrive.SLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const SLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncCloudDrive.SLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncCloudDrive.SLogin)
    MergeFrom(*source);
  }
}

void SLogin::MergeFrom(const SLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncCloudDrive.SLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLogin::CopyFrom(const SLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLogin::IsInitialized() const {
  return true;
}

void SLogin::InternalSwap(SLogin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SSync_File::_Internal {
 public:
};

SSync_File::SSync_File(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SSync.File)
}
SSync_File::SSync_File(const SSync_File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_md5().empty()) {
    md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_md5(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SSync.File)
}

void SSync_File::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSync_File_server_5fto_5fclient_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SSync_File::~SSync_File() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SSync.File)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSync_File::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSync_File::ArenaDtor(void* object) {
  SSync_File* _this = reinterpret_cast< SSync_File* >(object);
  (void)_this;
}
void SSync_File::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSync_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSync_File& SSync_File::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSync_File_server_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void SSync_File::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SSync.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  md5_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSync_File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SyncCloudDrive.SSync.File.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SyncCloudDrive.SSync.File.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string md5 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SyncCloudDrive.SSync.File.md5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSync_File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SSync.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SSync.File.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SSync.File.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string md5 = 3;
  if (this->md5().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SSync.File.md5");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SSync.File)
  return target;
}

size_t SSync_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SSync.File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string md5 = 3;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSync_File::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncCloudDrive.SSync.File)
  GOOGLE_DCHECK_NE(&from, this);
  const SSync_File* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSync_File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncCloudDrive.SSync.File)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncCloudDrive.SSync.File)
    MergeFrom(*source);
  }
}

void SSync_File::MergeFrom(const SSync_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SSync.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.md5().size() > 0) {
    _internal_set_md5(from._internal_md5());
  }
}

void SSync_File::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncCloudDrive.SSync.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSync_File::CopyFrom(const SSync_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SSync.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSync_File::IsInitialized() const {
  return true;
}

void SSync_File::InternalSwap(SSync_File* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  md5_.Swap(&other->md5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SSync_File::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SSync_Directory::_Internal {
 public:
};

SSync_Directory::SSync_Directory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sons_(arena),
  files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SSync.Directory)
}
SSync_Directory::SSync_Directory(const SSync_Directory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sons_(from.sons_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SSync.Directory)
}

void SSync_Directory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSync_Directory_server_5fto_5fclient_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SSync_Directory::~SSync_Directory() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SSync.Directory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSync_Directory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSync_Directory::ArenaDtor(void* object) {
  SSync_Directory* _this = reinterpret_cast< SSync_Directory* >(object);
  (void)_this;
}
void SSync_Directory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSync_Directory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSync_Directory& SSync_Directory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSync_Directory_server_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void SSync_Directory::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SSync.Directory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sons_.Clear();
  files_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSync_Directory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SyncCloudDrive.SSync.Directory.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SyncCloudDrive.SSync.Directory.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SyncCloudDrive.SSync.Directory sons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SyncCloudDrive.SSync.File files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSync_Directory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SSync.Directory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SSync.Directory.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SSync.Directory.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .SyncCloudDrive.SSync.Directory sons = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sons(i), target, stream);
  }

  // repeated .SyncCloudDrive.SSync.File files = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_files(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SSync.Directory)
  return target;
}

size_t SSync_Directory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SSync.Directory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SyncCloudDrive.SSync.Directory sons = 3;
  total_size += 1UL * this->_internal_sons_size();
  for (const auto& msg : this->sons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SyncCloudDrive.SSync.File files = 4;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSync_Directory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncCloudDrive.SSync.Directory)
  GOOGLE_DCHECK_NE(&from, this);
  const SSync_Directory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSync_Directory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncCloudDrive.SSync.Directory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncCloudDrive.SSync.Directory)
    MergeFrom(*source);
  }
}

void SSync_Directory::MergeFrom(const SSync_Directory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SSync.Directory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sons_.MergeFrom(from.sons_);
  files_.MergeFrom(from.files_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void SSync_Directory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncCloudDrive.SSync.Directory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSync_Directory::CopyFrom(const SSync_Directory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SSync.Directory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSync_Directory::IsInitialized() const {
  return true;
}

void SSync_Directory::InternalSwap(SSync_Directory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sons_.InternalSwap(&other->sons_);
  files_.InternalSwap(&other->files_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SSync_Directory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SSync::_Internal {
 public:
  static const ::SyncCloudDrive::SSync_Directory& root(const SSync* msg);
};

const ::SyncCloudDrive::SSync_Directory&
SSync::_Internal::root(const SSync* msg) {
  return *msg->root_;
}
SSync::SSync(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SSync)
}
SSync::SSync(const SSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_root()) {
    root_ = new ::SyncCloudDrive::SSync_Directory(*from.root_);
  } else {
    root_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SSync)
}

void SSync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSync_server_5fto_5fclient_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&root_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&root_)) + sizeof(state_));
}

SSync::~SSync() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SSync)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSync::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete root_;
}

void SSync::ArenaDtor(void* object) {
  SSync* _this = reinterpret_cast< SSync* >(object);
  (void)_this;
}
void SSync::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSync& SSync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSync_server_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void SSync::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SyncCloudDrive.SSync.Directory root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // .SyncCloudDrive.SSync.Directory root = 2;
  if (this->has_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::root(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SSync)
  return target;
}

size_t SSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SyncCloudDrive.SSync.Directory root = 2;
  if (this->has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncCloudDrive.SSync)
  GOOGLE_DCHECK_NE(&from, this);
  const SSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncCloudDrive.SSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncCloudDrive.SSync)
    MergeFrom(*source);
  }
}

void SSync::MergeFrom(const SSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_root()) {
    _internal_mutable_root()->::SyncCloudDrive::SSync_Directory::MergeFrom(from._internal_root());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncCloudDrive.SSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSync::CopyFrom(const SSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSync::IsInitialized() const {
  return true;
}

void SSync::InternalSwap(SSync* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSync, state_)
      + sizeof(SSync::state_)
      - PROTOBUF_FIELD_OFFSET(SSync, root_)>(
          reinterpret_cast<char*>(&root_),
          reinterpret_cast<char*>(&other->root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSync::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SUploadFile::_Internal {
 public:
};

SUploadFile::SUploadFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SUploadFile)
}
SUploadFile::SUploadFile(const SUploadFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&no_, &from.no_,
    static_cast<size_t>(reinterpret_cast<char*>(&slide_no_) -
    reinterpret_cast<char*>(&no_)) + sizeof(slide_no_));
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SUploadFile)
}

void SUploadFile::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&no_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&slide_no_) -
      reinterpret_cast<char*>(&no_)) + sizeof(slide_no_));
}

SUploadFile::~SUploadFile() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SUploadFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SUploadFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SUploadFile::ArenaDtor(void* object) {
  SUploadFile* _this = reinterpret_cast< SUploadFile* >(object);
  (void)_this;
}
void SUploadFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SUploadFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SUploadFile& SUploadFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SUploadFile_server_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void SUploadFile::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SUploadFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slide_no_) -
      reinterpret_cast<char*>(&no_)) + sizeof(slide_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SUploadFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 slide_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          slide_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SUploadFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SUploadFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 no = 1;
  if (this->no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_no(), target);
  }

  // int32 slide_no = 2;
  if (this->slide_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slide_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SUploadFile)
  return target;
}

size_t SUploadFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SUploadFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 no = 1;
  if (this->no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_no());
  }

  // int32 slide_no = 2;
  if (this->slide_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slide_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SUploadFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncCloudDrive.SUploadFile)
  GOOGLE_DCHECK_NE(&from, this);
  const SUploadFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SUploadFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncCloudDrive.SUploadFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncCloudDrive.SUploadFile)
    MergeFrom(*source);
  }
}

void SUploadFile::MergeFrom(const SUploadFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SUploadFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.no() != 0) {
    _internal_set_no(from._internal_no());
  }
  if (from.slide_no() != 0) {
    _internal_set_slide_no(from._internal_slide_no());
  }
}

void SUploadFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncCloudDrive.SUploadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUploadFile::CopyFrom(const SUploadFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SUploadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUploadFile::IsInitialized() const {
  return true;
}

void SUploadFile::InternalSwap(SUploadFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SUploadFile, slide_no_)
      + sizeof(SUploadFile::slide_no_)
      - PROTOBUF_FIELD_OFFSET(SUploadFile, no_)>(
          reinterpret_cast<char*>(&no_),
          reinterpret_cast<char*>(&other->no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SUploadFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SDownload::_Internal {
 public:
};

SDownload::SDownload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SDownload)
}
SDownload::SDownload(const SDownload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_id().empty()) {
    file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_id(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  slide_no_ = from.slide_no_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SDownload)
}

void SDownload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SDownload_server_5fto_5fclient_2eproto.base);
  file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slide_no_ = 0;
}

SDownload::~SDownload() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SDownload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SDownload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SDownload::ArenaDtor(void* object) {
  SDownload* _this = reinterpret_cast< SDownload* >(object);
  (void)_this;
}
void SDownload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SDownload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDownload& SDownload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDownload_server_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void SDownload::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SDownload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_id_.ClearToEmpty();
  data_.ClearToEmpty();
  slide_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDownload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SyncCloudDrive.SDownload.file_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 slide_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          slide_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SyncCloudDrive.SDownload.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SDownload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SDownload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (this->file_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SDownload.file_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_id(), target);
  }

  // int32 slide_no = 2;
  if (this->slide_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slide_no(), target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SDownload.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SDownload)
  return target;
}

size_t SDownload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SDownload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_id = 1;
  if (this->file_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_id());
  }

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int32 slide_no = 2;
  if (this->slide_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slide_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDownload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncCloudDrive.SDownload)
  GOOGLE_DCHECK_NE(&from, this);
  const SDownload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDownload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncCloudDrive.SDownload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncCloudDrive.SDownload)
    MergeFrom(*source);
  }
}

void SDownload::MergeFrom(const SDownload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SDownload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_id().size() > 0) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.slide_no() != 0) {
    _internal_set_slide_no(from._internal_slide_no());
  }
}

void SDownload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncCloudDrive.SDownload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDownload::CopyFrom(const SDownload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SDownload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDownload::IsInitialized() const {
  return true;
}

void SDownload::InternalSwap(SDownload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  file_id_.Swap(&other->file_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(slide_no_, other->slide_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDownload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SDeleteFile::_Internal {
 public:
};

SDeleteFile::SDeleteFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SDeleteFile)
}
SDeleteFile::SDeleteFile(const SDeleteFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SDeleteFile)
}

void SDeleteFile::SharedCtor() {
  state_ = 0;
}

SDeleteFile::~SDeleteFile() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SDeleteFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SDeleteFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SDeleteFile::ArenaDtor(void* object) {
  SDeleteFile* _this = reinterpret_cast< SDeleteFile* >(object);
  (void)_this;
}
void SDeleteFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SDeleteFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDeleteFile& SDeleteFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDeleteFile_server_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void SDeleteFile::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SDeleteFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDeleteFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SDeleteFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SDeleteFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SDeleteFile)
  return target;
}

size_t SDeleteFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SDeleteFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDeleteFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncCloudDrive.SDeleteFile)
  GOOGLE_DCHECK_NE(&from, this);
  const SDeleteFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDeleteFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncCloudDrive.SDeleteFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncCloudDrive.SDeleteFile)
    MergeFrom(*source);
  }
}

void SDeleteFile::MergeFrom(const SDeleteFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SDeleteFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SDeleteFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncCloudDrive.SDeleteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDeleteFile::CopyFrom(const SDeleteFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SDeleteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDeleteFile::IsInitialized() const {
  return true;
}

void SDeleteFile::InternalSwap(SDeleteFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDeleteFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SAddDirectory::_Internal {
 public:
};

SAddDirectory::SAddDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SAddDirectory)
}
SAddDirectory::SAddDirectory(const SAddDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SAddDirectory)
}

void SAddDirectory::SharedCtor() {
  state_ = 0;
}

SAddDirectory::~SAddDirectory() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SAddDirectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SAddDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SAddDirectory::ArenaDtor(void* object) {
  SAddDirectory* _this = reinterpret_cast< SAddDirectory* >(object);
  (void)_this;
}
void SAddDirectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SAddDirectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAddDirectory& SAddDirectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAddDirectory_server_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void SAddDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SAddDirectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SAddDirectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAddDirectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SAddDirectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SAddDirectory)
  return target;
}

size_t SAddDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SAddDirectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAddDirectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncCloudDrive.SAddDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  const SAddDirectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAddDirectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncCloudDrive.SAddDirectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncCloudDrive.SAddDirectory)
    MergeFrom(*source);
  }
}

void SAddDirectory::MergeFrom(const SAddDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SAddDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SAddDirectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncCloudDrive.SAddDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAddDirectory::CopyFrom(const SAddDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SAddDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAddDirectory::IsInitialized() const {
  return true;
}

void SAddDirectory::InternalSwap(SAddDirectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SAddDirectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SDeleteDirectory::_Internal {
 public:
};

SDeleteDirectory::SDeleteDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SDeleteDirectory)
}
SDeleteDirectory::SDeleteDirectory(const SDeleteDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SDeleteDirectory)
}

void SDeleteDirectory::SharedCtor() {
  state_ = 0;
}

SDeleteDirectory::~SDeleteDirectory() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SDeleteDirectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SDeleteDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SDeleteDirectory::ArenaDtor(void* object) {
  SDeleteDirectory* _this = reinterpret_cast< SDeleteDirectory* >(object);
  (void)_this;
}
void SDeleteDirectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SDeleteDirectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDeleteDirectory& SDeleteDirectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDeleteDirectory_server_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void SDeleteDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SDeleteDirectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDeleteDirectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SDeleteDirectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SDeleteDirectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SDeleteDirectory)
  return target;
}

size_t SDeleteDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SDeleteDirectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDeleteDirectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncCloudDrive.SDeleteDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  const SDeleteDirectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDeleteDirectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncCloudDrive.SDeleteDirectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncCloudDrive.SDeleteDirectory)
    MergeFrom(*source);
  }
}

void SDeleteDirectory::MergeFrom(const SDeleteDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SDeleteDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SDeleteDirectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncCloudDrive.SDeleteDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDeleteDirectory::CopyFrom(const SDeleteDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SDeleteDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDeleteDirectory::IsInitialized() const {
  return true;
}

void SDeleteDirectory::InternalSwap(SDeleteDirectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDeleteDirectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SModifyUser::_Internal {
 public:
};

SModifyUser::SModifyUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SModifyUser)
}
SModifyUser::SModifyUser(const SModifyUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SModifyUser)
}

void SModifyUser::SharedCtor() {
  state_ = 0;
}

SModifyUser::~SModifyUser() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SModifyUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SModifyUser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SModifyUser::ArenaDtor(void* object) {
  SModifyUser* _this = reinterpret_cast< SModifyUser* >(object);
  (void)_this;
}
void SModifyUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SModifyUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SModifyUser& SModifyUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SModifyUser_server_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void SModifyUser::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SModifyUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SModifyUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SModifyUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SModifyUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SModifyUser)
  return target;
}

size_t SModifyUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SModifyUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SModifyUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncCloudDrive.SModifyUser)
  GOOGLE_DCHECK_NE(&from, this);
  const SModifyUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SModifyUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncCloudDrive.SModifyUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncCloudDrive.SModifyUser)
    MergeFrom(*source);
  }
}

void SModifyUser::MergeFrom(const SModifyUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SModifyUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SModifyUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncCloudDrive.SModifyUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SModifyUser::CopyFrom(const SModifyUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SModifyUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SModifyUser::IsInitialized() const {
  return true;
}

void SModifyUser::InternalSwap(SModifyUser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SModifyUser::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SyncCloudDrive
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SRegister* Arena::CreateMaybeMessage< ::SyncCloudDrive::SRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SLogin* Arena::CreateMaybeMessage< ::SyncCloudDrive::SLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SSync_File* Arena::CreateMaybeMessage< ::SyncCloudDrive::SSync_File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SSync_File >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SSync_Directory* Arena::CreateMaybeMessage< ::SyncCloudDrive::SSync_Directory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SSync_Directory >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SSync* Arena::CreateMaybeMessage< ::SyncCloudDrive::SSync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SSync >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SUploadFile* Arena::CreateMaybeMessage< ::SyncCloudDrive::SUploadFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SUploadFile >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SDownload* Arena::CreateMaybeMessage< ::SyncCloudDrive::SDownload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SDownload >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SDeleteFile* Arena::CreateMaybeMessage< ::SyncCloudDrive::SDeleteFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SDeleteFile >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SAddDirectory* Arena::CreateMaybeMessage< ::SyncCloudDrive::SAddDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SAddDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SDeleteDirectory* Arena::CreateMaybeMessage< ::SyncCloudDrive::SDeleteDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SDeleteDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SModifyUser* Arena::CreateMaybeMessage< ::SyncCloudDrive::SModifyUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SModifyUser >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
