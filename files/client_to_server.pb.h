// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_to_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fto_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fto_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fto_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fto_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fto_5fserver_2eproto;
namespace SyncCloudDrive {
class CAddDirectory;
class CAddDirectoryDefaultTypeInternal;
extern CAddDirectoryDefaultTypeInternal _CAddDirectory_default_instance_;
class CDeleteDirectory;
class CDeleteDirectoryDefaultTypeInternal;
extern CDeleteDirectoryDefaultTypeInternal _CDeleteDirectory_default_instance_;
class CDeleteFile;
class CDeleteFileDefaultTypeInternal;
extern CDeleteFileDefaultTypeInternal _CDeleteFile_default_instance_;
class CDownLoad;
class CDownLoadDefaultTypeInternal;
extern CDownLoadDefaultTypeInternal _CDownLoad_default_instance_;
class CLogin;
class CLoginDefaultTypeInternal;
extern CLoginDefaultTypeInternal _CLogin_default_instance_;
class CModifyUser;
class CModifyUserDefaultTypeInternal;
extern CModifyUserDefaultTypeInternal _CModifyUser_default_instance_;
class CRegister;
class CRegisterDefaultTypeInternal;
extern CRegisterDefaultTypeInternal _CRegister_default_instance_;
class CUploadData;
class CUploadDataDefaultTypeInternal;
extern CUploadDataDefaultTypeInternal _CUploadData_default_instance_;
class CUploadFile;
class CUploadFileDefaultTypeInternal;
extern CUploadFileDefaultTypeInternal _CUploadFile_default_instance_;
}  // namespace SyncCloudDrive
PROTOBUF_NAMESPACE_OPEN
template<> ::SyncCloudDrive::CAddDirectory* Arena::CreateMaybeMessage<::SyncCloudDrive::CAddDirectory>(Arena*);
template<> ::SyncCloudDrive::CDeleteDirectory* Arena::CreateMaybeMessage<::SyncCloudDrive::CDeleteDirectory>(Arena*);
template<> ::SyncCloudDrive::CDeleteFile* Arena::CreateMaybeMessage<::SyncCloudDrive::CDeleteFile>(Arena*);
template<> ::SyncCloudDrive::CDownLoad* Arena::CreateMaybeMessage<::SyncCloudDrive::CDownLoad>(Arena*);
template<> ::SyncCloudDrive::CLogin* Arena::CreateMaybeMessage<::SyncCloudDrive::CLogin>(Arena*);
template<> ::SyncCloudDrive::CModifyUser* Arena::CreateMaybeMessage<::SyncCloudDrive::CModifyUser>(Arena*);
template<> ::SyncCloudDrive::CRegister* Arena::CreateMaybeMessage<::SyncCloudDrive::CRegister>(Arena*);
template<> ::SyncCloudDrive::CUploadData* Arena::CreateMaybeMessage<::SyncCloudDrive::CUploadData>(Arena*);
template<> ::SyncCloudDrive::CUploadFile* Arena::CreateMaybeMessage<::SyncCloudDrive::CUploadFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SyncCloudDrive {

enum ClientCommandType : int {
  C_REGISTER = 0,
  C_LOGIN = 1,
  C_SYNC = 2,
  C_UPLOAD_FILE = 3,
  C_DOWNLOAD = 4,
  C_UPLOAD_DATA = 5,
  C_DELETE_FILE = 6,
  C_ADD_DIRECTORY = 7,
  C_DELETE_DIRECTORY = 8,
  C_MODIFY_USER = 9,
  ClientCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientCommandType_IsValid(int value);
constexpr ClientCommandType ClientCommandType_MIN = C_REGISTER;
constexpr ClientCommandType ClientCommandType_MAX = C_MODIFY_USER;
constexpr int ClientCommandType_ARRAYSIZE = ClientCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommandType_descriptor();
template<typename T>
inline const std::string& ClientCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientCommandType_descriptor(), enum_t_value);
}
inline bool ClientCommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientCommandType>(
    ClientCommandType_descriptor(), name, value);
}
// ===================================================================

class CRegister PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.CRegister) */ {
 public:
  inline CRegister() : CRegister(nullptr) {}
  virtual ~CRegister();

  CRegister(const CRegister& from);
  CRegister(CRegister&& from) noexcept
    : CRegister() {
    *this = ::std::move(from);
  }

  inline CRegister& operator=(const CRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRegister& operator=(CRegister&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CRegister& default_instance();

  static inline const CRegister* internal_default_instance() {
    return reinterpret_cast<const CRegister*>(
               &_CRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CRegister& a, CRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(CRegister* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CRegister* New() const final {
    return CreateMaybeMessage<CRegister>(nullptr);
  }

  CRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CRegister& from);
  void MergeFrom(const CRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.CRegister";
  }
  protected:
  explicit CRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fto_5fserver_2eproto);
    return ::descriptor_table_client_5fto_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordMd5FieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password_md5 = 2;
  void clear_password_md5();
  const std::string& password_md5() const;
  void set_password_md5(const std::string& value);
  void set_password_md5(std::string&& value);
  void set_password_md5(const char* value);
  void set_password_md5(const char* value, size_t size);
  std::string* mutable_password_md5();
  std::string* release_password_md5();
  void set_allocated_password_md5(std::string* password_md5);
  private:
  const std::string& _internal_password_md5() const;
  void _internal_set_password_md5(const std::string& value);
  std::string* _internal_mutable_password_md5();
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.CRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_md5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fto_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.CLogin) */ {
 public:
  inline CLogin() : CLogin(nullptr) {}
  virtual ~CLogin();

  CLogin(const CLogin& from);
  CLogin(CLogin&& from) noexcept
    : CLogin() {
    *this = ::std::move(from);
  }

  inline CLogin& operator=(const CLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLogin& operator=(CLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLogin& default_instance();

  static inline const CLogin* internal_default_instance() {
    return reinterpret_cast<const CLogin*>(
               &_CLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CLogin& a, CLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(CLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLogin* New() const final {
    return CreateMaybeMessage<CLogin>(nullptr);
  }

  CLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLogin& from);
  void MergeFrom(const CLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.CLogin";
  }
  protected:
  explicit CLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fto_5fserver_2eproto);
    return ::descriptor_table_client_5fto_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordMd5FieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password_md5 = 2;
  void clear_password_md5();
  const std::string& password_md5() const;
  void set_password_md5(const std::string& value);
  void set_password_md5(std::string&& value);
  void set_password_md5(const char* value);
  void set_password_md5(const char* value, size_t size);
  std::string* mutable_password_md5();
  std::string* release_password_md5();
  void set_allocated_password_md5(std::string* password_md5);
  private:
  const std::string& _internal_password_md5() const;
  void _internal_set_password_md5(const std::string& value);
  std::string* _internal_mutable_password_md5();
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.CLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_md5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fto_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CUploadFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.CUploadFile) */ {
 public:
  inline CUploadFile() : CUploadFile(nullptr) {}
  virtual ~CUploadFile();

  CUploadFile(const CUploadFile& from);
  CUploadFile(CUploadFile&& from) noexcept
    : CUploadFile() {
    *this = ::std::move(from);
  }

  inline CUploadFile& operator=(const CUploadFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUploadFile& operator=(CUploadFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUploadFile& default_instance();

  static inline const CUploadFile* internal_default_instance() {
    return reinterpret_cast<const CUploadFile*>(
               &_CUploadFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CUploadFile& a, CUploadFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CUploadFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUploadFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUploadFile* New() const final {
    return CreateMaybeMessage<CUploadFile>(nullptr);
  }

  CUploadFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUploadFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUploadFile& from);
  void MergeFrom(const CUploadFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUploadFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.CUploadFile";
  }
  protected:
  explicit CUploadFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fto_5fserver_2eproto);
    return ::descriptor_table_client_5fto_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 1,
    kParentIdFieldNumber = 3,
    kSizeFieldNumber = 2,
  };
  // string md5 = 1;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // string parent_id = 3;
  void clear_parent_id();
  const std::string& parent_id() const;
  void set_parent_id(const std::string& value);
  void set_parent_id(std::string&& value);
  void set_parent_id(const char* value);
  void set_parent_id(const char* value, size_t size);
  std::string* mutable_parent_id();
  std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // int32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.CUploadFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fto_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CDownLoad PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.CDownLoad) */ {
 public:
  inline CDownLoad() : CDownLoad(nullptr) {}
  virtual ~CDownLoad();

  CDownLoad(const CDownLoad& from);
  CDownLoad(CDownLoad&& from) noexcept
    : CDownLoad() {
    *this = ::std::move(from);
  }

  inline CDownLoad& operator=(const CDownLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDownLoad& operator=(CDownLoad&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDownLoad& default_instance();

  static inline const CDownLoad* internal_default_instance() {
    return reinterpret_cast<const CDownLoad*>(
               &_CDownLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CDownLoad& a, CDownLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(CDownLoad* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDownLoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDownLoad* New() const final {
    return CreateMaybeMessage<CDownLoad>(nullptr);
  }

  CDownLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDownLoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDownLoad& from);
  void MergeFrom(const CDownLoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDownLoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.CDownLoad";
  }
  protected:
  explicit CDownLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fto_5fserver_2eproto);
    return ::descriptor_table_client_5fto_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 1,
    kSlideNoFieldNumber = 2,
  };
  // string file_id = 1;
  void clear_file_id();
  const std::string& file_id() const;
  void set_file_id(const std::string& value);
  void set_file_id(std::string&& value);
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  std::string* mutable_file_id();
  std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);
  private:
  const std::string& _internal_file_id() const;
  void _internal_set_file_id(const std::string& value);
  std::string* _internal_mutable_file_id();
  public:

  // int32 slide_no = 2;
  void clear_slide_no();
  ::PROTOBUF_NAMESPACE_ID::int32 slide_no() const;
  void set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slide_no() const;
  void _internal_set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.CDownLoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 slide_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fto_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CUploadData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.CUploadData) */ {
 public:
  inline CUploadData() : CUploadData(nullptr) {}
  virtual ~CUploadData();

  CUploadData(const CUploadData& from);
  CUploadData(CUploadData&& from) noexcept
    : CUploadData() {
    *this = ::std::move(from);
  }

  inline CUploadData& operator=(const CUploadData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUploadData& operator=(CUploadData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUploadData& default_instance();

  static inline const CUploadData* internal_default_instance() {
    return reinterpret_cast<const CUploadData*>(
               &_CUploadData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CUploadData& a, CUploadData& b) {
    a.Swap(&b);
  }
  inline void Swap(CUploadData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUploadData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUploadData* New() const final {
    return CreateMaybeMessage<CUploadData>(nullptr);
  }

  CUploadData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUploadData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUploadData& from);
  void MergeFrom(const CUploadData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUploadData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.CUploadData";
  }
  protected:
  explicit CUploadData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fto_5fserver_2eproto);
    return ::descriptor_table_client_5fto_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 1,
    kDataFieldNumber = 3,
    kSlideNoFieldNumber = 2,
  };
  // string md5 = 1;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // string data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 slide_no = 2;
  void clear_slide_no();
  ::PROTOBUF_NAMESPACE_ID::int32 slide_no() const;
  void set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slide_no() const;
  void _internal_set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.CUploadData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 slide_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fto_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CDeleteFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.CDeleteFile) */ {
 public:
  inline CDeleteFile() : CDeleteFile(nullptr) {}
  virtual ~CDeleteFile();

  CDeleteFile(const CDeleteFile& from);
  CDeleteFile(CDeleteFile&& from) noexcept
    : CDeleteFile() {
    *this = ::std::move(from);
  }

  inline CDeleteFile& operator=(const CDeleteFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeleteFile& operator=(CDeleteFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDeleteFile& default_instance();

  static inline const CDeleteFile* internal_default_instance() {
    return reinterpret_cast<const CDeleteFile*>(
               &_CDeleteFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CDeleteFile& a, CDeleteFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeleteFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeleteFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDeleteFile* New() const final {
    return CreateMaybeMessage<CDeleteFile>(nullptr);
  }

  CDeleteFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDeleteFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDeleteFile& from);
  void MergeFrom(const CDeleteFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeleteFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.CDeleteFile";
  }
  protected:
  explicit CDeleteFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fto_5fserver_2eproto);
    return ::descriptor_table_client_5fto_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 1,
  };
  // string file_id = 1;
  void clear_file_id();
  const std::string& file_id() const;
  void set_file_id(const std::string& value);
  void set_file_id(std::string&& value);
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  std::string* mutable_file_id();
  std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);
  private:
  const std::string& _internal_file_id() const;
  void _internal_set_file_id(const std::string& value);
  std::string* _internal_mutable_file_id();
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.CDeleteFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fto_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CAddDirectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.CAddDirectory) */ {
 public:
  inline CAddDirectory() : CAddDirectory(nullptr) {}
  virtual ~CAddDirectory();

  CAddDirectory(const CAddDirectory& from);
  CAddDirectory(CAddDirectory&& from) noexcept
    : CAddDirectory() {
    *this = ::std::move(from);
  }

  inline CAddDirectory& operator=(const CAddDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAddDirectory& operator=(CAddDirectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAddDirectory& default_instance();

  static inline const CAddDirectory* internal_default_instance() {
    return reinterpret_cast<const CAddDirectory*>(
               &_CAddDirectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CAddDirectory& a, CAddDirectory& b) {
    a.Swap(&b);
  }
  inline void Swap(CAddDirectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAddDirectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAddDirectory* New() const final {
    return CreateMaybeMessage<CAddDirectory>(nullptr);
  }

  CAddDirectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAddDirectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAddDirectory& from);
  void MergeFrom(const CAddDirectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAddDirectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.CAddDirectory";
  }
  protected:
  explicit CAddDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fto_5fserver_2eproto);
    return ::descriptor_table_client_5fto_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string parent_id = 1;
  void clear_parent_id();
  const std::string& parent_id() const;
  void set_parent_id(const std::string& value);
  void set_parent_id(std::string&& value);
  void set_parent_id(const char* value);
  void set_parent_id(const char* value, size_t size);
  std::string* mutable_parent_id();
  std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.CAddDirectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fto_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CDeleteDirectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.CDeleteDirectory) */ {
 public:
  inline CDeleteDirectory() : CDeleteDirectory(nullptr) {}
  virtual ~CDeleteDirectory();

  CDeleteDirectory(const CDeleteDirectory& from);
  CDeleteDirectory(CDeleteDirectory&& from) noexcept
    : CDeleteDirectory() {
    *this = ::std::move(from);
  }

  inline CDeleteDirectory& operator=(const CDeleteDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDeleteDirectory& operator=(CDeleteDirectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDeleteDirectory& default_instance();

  static inline const CDeleteDirectory* internal_default_instance() {
    return reinterpret_cast<const CDeleteDirectory*>(
               &_CDeleteDirectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CDeleteDirectory& a, CDeleteDirectory& b) {
    a.Swap(&b);
  }
  inline void Swap(CDeleteDirectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDeleteDirectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDeleteDirectory* New() const final {
    return CreateMaybeMessage<CDeleteDirectory>(nullptr);
  }

  CDeleteDirectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDeleteDirectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDeleteDirectory& from);
  void MergeFrom(const CDeleteDirectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDeleteDirectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.CDeleteDirectory";
  }
  protected:
  explicit CDeleteDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fto_5fserver_2eproto);
    return ::descriptor_table_client_5fto_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectoryIdFieldNumber = 1,
  };
  // string directory_id = 1;
  void clear_directory_id();
  const std::string& directory_id() const;
  void set_directory_id(const std::string& value);
  void set_directory_id(std::string&& value);
  void set_directory_id(const char* value);
  void set_directory_id(const char* value, size_t size);
  std::string* mutable_directory_id();
  std::string* release_directory_id();
  void set_allocated_directory_id(std::string* directory_id);
  private:
  const std::string& _internal_directory_id() const;
  void _internal_set_directory_id(const std::string& value);
  std::string* _internal_mutable_directory_id();
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.CDeleteDirectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directory_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fto_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CModifyUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.CModifyUser) */ {
 public:
  inline CModifyUser() : CModifyUser(nullptr) {}
  virtual ~CModifyUser();

  CModifyUser(const CModifyUser& from);
  CModifyUser(CModifyUser&& from) noexcept
    : CModifyUser() {
    *this = ::std::move(from);
  }

  inline CModifyUser& operator=(const CModifyUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline CModifyUser& operator=(CModifyUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CModifyUser& default_instance();

  static inline const CModifyUser* internal_default_instance() {
    return reinterpret_cast<const CModifyUser*>(
               &_CModifyUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CModifyUser& a, CModifyUser& b) {
    a.Swap(&b);
  }
  inline void Swap(CModifyUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CModifyUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CModifyUser* New() const final {
    return CreateMaybeMessage<CModifyUser>(nullptr);
  }

  CModifyUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CModifyUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CModifyUser& from);
  void MergeFrom(const CModifyUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CModifyUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.CModifyUser";
  }
  protected:
  explicit CModifyUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fto_5fserver_2eproto);
    return ::descriptor_table_client_5fto_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.CModifyUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fto_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CRegister

// string name = 1;
inline void CRegister::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CRegister::name() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CRegister.name)
  return _internal_name();
}
inline void CRegister::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CRegister.name)
}
inline std::string* CRegister::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CRegister.name)
  return _internal_mutable_name();
}
inline const std::string& CRegister::_internal_name() const {
  return name_.Get();
}
inline void CRegister::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CRegister::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CRegister.name)
}
inline void CRegister::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CRegister.name)
}
inline void CRegister::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CRegister.name)
}
inline std::string* CRegister::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CRegister::release_name() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CRegister.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRegister::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CRegister.name)
}

// string password_md5 = 2;
inline void CRegister::clear_password_md5() {
  password_md5_.ClearToEmpty();
}
inline const std::string& CRegister::password_md5() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CRegister.password_md5)
  return _internal_password_md5();
}
inline void CRegister::set_password_md5(const std::string& value) {
  _internal_set_password_md5(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CRegister.password_md5)
}
inline std::string* CRegister::mutable_password_md5() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CRegister.password_md5)
  return _internal_mutable_password_md5();
}
inline const std::string& CRegister::_internal_password_md5() const {
  return password_md5_.Get();
}
inline void CRegister::_internal_set_password_md5(const std::string& value) {
  
  password_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CRegister::set_password_md5(std::string&& value) {
  
  password_md5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CRegister.password_md5)
}
inline void CRegister::set_password_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CRegister.password_md5)
}
inline void CRegister::set_password_md5(const char* value,
    size_t size) {
  
  password_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CRegister.password_md5)
}
inline std::string* CRegister::_internal_mutable_password_md5() {
  
  return password_md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CRegister::release_password_md5() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CRegister.password_md5)
  return password_md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CRegister::set_allocated_password_md5(std::string* password_md5) {
  if (password_md5 != nullptr) {
    
  } else {
    
  }
  password_md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password_md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CRegister.password_md5)
}

// -------------------------------------------------------------------

// CLogin

// string name = 1;
inline void CLogin::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CLogin::name() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CLogin.name)
  return _internal_name();
}
inline void CLogin::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CLogin.name)
}
inline std::string* CLogin::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CLogin.name)
  return _internal_mutable_name();
}
inline const std::string& CLogin::_internal_name() const {
  return name_.Get();
}
inline void CLogin::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLogin::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CLogin.name)
}
inline void CLogin::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CLogin.name)
}
inline void CLogin::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CLogin.name)
}
inline std::string* CLogin::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLogin::release_name() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CLogin.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLogin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CLogin.name)
}

// string password_md5 = 2;
inline void CLogin::clear_password_md5() {
  password_md5_.ClearToEmpty();
}
inline const std::string& CLogin::password_md5() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CLogin.password_md5)
  return _internal_password_md5();
}
inline void CLogin::set_password_md5(const std::string& value) {
  _internal_set_password_md5(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CLogin.password_md5)
}
inline std::string* CLogin::mutable_password_md5() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CLogin.password_md5)
  return _internal_mutable_password_md5();
}
inline const std::string& CLogin::_internal_password_md5() const {
  return password_md5_.Get();
}
inline void CLogin::_internal_set_password_md5(const std::string& value) {
  
  password_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLogin::set_password_md5(std::string&& value) {
  
  password_md5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CLogin.password_md5)
}
inline void CLogin::set_password_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CLogin.password_md5)
}
inline void CLogin::set_password_md5(const char* value,
    size_t size) {
  
  password_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CLogin.password_md5)
}
inline std::string* CLogin::_internal_mutable_password_md5() {
  
  return password_md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLogin::release_password_md5() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CLogin.password_md5)
  return password_md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLogin::set_allocated_password_md5(std::string* password_md5) {
  if (password_md5 != nullptr) {
    
  } else {
    
  }
  password_md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password_md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CLogin.password_md5)
}

// -------------------------------------------------------------------

// CUploadFile

// string md5 = 1;
inline void CUploadFile::clear_md5() {
  md5_.ClearToEmpty();
}
inline const std::string& CUploadFile::md5() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CUploadFile.md5)
  return _internal_md5();
}
inline void CUploadFile::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CUploadFile.md5)
}
inline std::string* CUploadFile::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CUploadFile.md5)
  return _internal_mutable_md5();
}
inline const std::string& CUploadFile::_internal_md5() const {
  return md5_.Get();
}
inline void CUploadFile::_internal_set_md5(const std::string& value) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CUploadFile::set_md5(std::string&& value) {
  
  md5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CUploadFile.md5)
}
inline void CUploadFile::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CUploadFile.md5)
}
inline void CUploadFile::set_md5(const char* value,
    size_t size) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CUploadFile.md5)
}
inline std::string* CUploadFile::_internal_mutable_md5() {
  
  return md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CUploadFile::release_md5() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CUploadFile.md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CUploadFile::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CUploadFile.md5)
}

// int32 size = 2;
inline void CUploadFile::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUploadFile::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUploadFile::size() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CUploadFile.size)
  return _internal_size();
}
inline void CUploadFile::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void CUploadFile::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CUploadFile.size)
}

// string parent_id = 3;
inline void CUploadFile::clear_parent_id() {
  parent_id_.ClearToEmpty();
}
inline const std::string& CUploadFile::parent_id() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CUploadFile.parent_id)
  return _internal_parent_id();
}
inline void CUploadFile::set_parent_id(const std::string& value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CUploadFile.parent_id)
}
inline std::string* CUploadFile::mutable_parent_id() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CUploadFile.parent_id)
  return _internal_mutable_parent_id();
}
inline const std::string& CUploadFile::_internal_parent_id() const {
  return parent_id_.Get();
}
inline void CUploadFile::_internal_set_parent_id(const std::string& value) {
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CUploadFile::set_parent_id(std::string&& value) {
  
  parent_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CUploadFile.parent_id)
}
inline void CUploadFile::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CUploadFile.parent_id)
}
inline void CUploadFile::set_parent_id(const char* value,
    size_t size) {
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CUploadFile.parent_id)
}
inline std::string* CUploadFile::_internal_mutable_parent_id() {
  
  return parent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CUploadFile::release_parent_id() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CUploadFile.parent_id)
  return parent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CUploadFile::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  parent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CUploadFile.parent_id)
}

// -------------------------------------------------------------------

// CDownLoad

// string file_id = 1;
inline void CDownLoad::clear_file_id() {
  file_id_.ClearToEmpty();
}
inline const std::string& CDownLoad::file_id() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CDownLoad.file_id)
  return _internal_file_id();
}
inline void CDownLoad::set_file_id(const std::string& value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CDownLoad.file_id)
}
inline std::string* CDownLoad::mutable_file_id() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CDownLoad.file_id)
  return _internal_mutable_file_id();
}
inline const std::string& CDownLoad::_internal_file_id() const {
  return file_id_.Get();
}
inline void CDownLoad::_internal_set_file_id(const std::string& value) {
  
  file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDownLoad::set_file_id(std::string&& value) {
  
  file_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CDownLoad.file_id)
}
inline void CDownLoad::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CDownLoad.file_id)
}
inline void CDownLoad::set_file_id(const char* value,
    size_t size) {
  
  file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CDownLoad.file_id)
}
inline std::string* CDownLoad::_internal_mutable_file_id() {
  
  return file_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDownLoad::release_file_id() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CDownLoad.file_id)
  return file_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDownLoad::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    
  } else {
    
  }
  file_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CDownLoad.file_id)
}

// int32 slide_no = 2;
inline void CDownLoad::clear_slide_no() {
  slide_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDownLoad::_internal_slide_no() const {
  return slide_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDownLoad::slide_no() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CDownLoad.slide_no)
  return _internal_slide_no();
}
inline void CDownLoad::_internal_set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slide_no_ = value;
}
inline void CDownLoad::set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slide_no(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CDownLoad.slide_no)
}

// -------------------------------------------------------------------

// CUploadData

// string md5 = 1;
inline void CUploadData::clear_md5() {
  md5_.ClearToEmpty();
}
inline const std::string& CUploadData::md5() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CUploadData.md5)
  return _internal_md5();
}
inline void CUploadData::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CUploadData.md5)
}
inline std::string* CUploadData::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CUploadData.md5)
  return _internal_mutable_md5();
}
inline const std::string& CUploadData::_internal_md5() const {
  return md5_.Get();
}
inline void CUploadData::_internal_set_md5(const std::string& value) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CUploadData::set_md5(std::string&& value) {
  
  md5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CUploadData.md5)
}
inline void CUploadData::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CUploadData.md5)
}
inline void CUploadData::set_md5(const char* value,
    size_t size) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CUploadData.md5)
}
inline std::string* CUploadData::_internal_mutable_md5() {
  
  return md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CUploadData::release_md5() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CUploadData.md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CUploadData::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CUploadData.md5)
}

// int32 slide_no = 2;
inline void CUploadData::clear_slide_no() {
  slide_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUploadData::_internal_slide_no() const {
  return slide_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CUploadData::slide_no() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CUploadData.slide_no)
  return _internal_slide_no();
}
inline void CUploadData::_internal_set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slide_no_ = value;
}
inline void CUploadData::set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slide_no(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CUploadData.slide_no)
}

// string data = 3;
inline void CUploadData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& CUploadData::data() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CUploadData.data)
  return _internal_data();
}
inline void CUploadData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CUploadData.data)
}
inline std::string* CUploadData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CUploadData.data)
  return _internal_mutable_data();
}
inline const std::string& CUploadData::_internal_data() const {
  return data_.Get();
}
inline void CUploadData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CUploadData::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CUploadData.data)
}
inline void CUploadData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CUploadData.data)
}
inline void CUploadData::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CUploadData.data)
}
inline std::string* CUploadData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CUploadData::release_data() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CUploadData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CUploadData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CUploadData.data)
}

// -------------------------------------------------------------------

// CDeleteFile

// string file_id = 1;
inline void CDeleteFile::clear_file_id() {
  file_id_.ClearToEmpty();
}
inline const std::string& CDeleteFile::file_id() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CDeleteFile.file_id)
  return _internal_file_id();
}
inline void CDeleteFile::set_file_id(const std::string& value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CDeleteFile.file_id)
}
inline std::string* CDeleteFile::mutable_file_id() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CDeleteFile.file_id)
  return _internal_mutable_file_id();
}
inline const std::string& CDeleteFile::_internal_file_id() const {
  return file_id_.Get();
}
inline void CDeleteFile::_internal_set_file_id(const std::string& value) {
  
  file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDeleteFile::set_file_id(std::string&& value) {
  
  file_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CDeleteFile.file_id)
}
inline void CDeleteFile::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CDeleteFile.file_id)
}
inline void CDeleteFile::set_file_id(const char* value,
    size_t size) {
  
  file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CDeleteFile.file_id)
}
inline std::string* CDeleteFile::_internal_mutable_file_id() {
  
  return file_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDeleteFile::release_file_id() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CDeleteFile.file_id)
  return file_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDeleteFile::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    
  } else {
    
  }
  file_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CDeleteFile.file_id)
}

// -------------------------------------------------------------------

// CAddDirectory

// string parent_id = 1;
inline void CAddDirectory::clear_parent_id() {
  parent_id_.ClearToEmpty();
}
inline const std::string& CAddDirectory::parent_id() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CAddDirectory.parent_id)
  return _internal_parent_id();
}
inline void CAddDirectory::set_parent_id(const std::string& value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CAddDirectory.parent_id)
}
inline std::string* CAddDirectory::mutable_parent_id() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CAddDirectory.parent_id)
  return _internal_mutable_parent_id();
}
inline const std::string& CAddDirectory::_internal_parent_id() const {
  return parent_id_.Get();
}
inline void CAddDirectory::_internal_set_parent_id(const std::string& value) {
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CAddDirectory::set_parent_id(std::string&& value) {
  
  parent_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CAddDirectory.parent_id)
}
inline void CAddDirectory::set_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CAddDirectory.parent_id)
}
inline void CAddDirectory::set_parent_id(const char* value,
    size_t size) {
  
  parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CAddDirectory.parent_id)
}
inline std::string* CAddDirectory::_internal_mutable_parent_id() {
  
  return parent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CAddDirectory::release_parent_id() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CAddDirectory.parent_id)
  return parent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CAddDirectory::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  parent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CAddDirectory.parent_id)
}

// string name = 2;
inline void CAddDirectory::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CAddDirectory::name() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CAddDirectory.name)
  return _internal_name();
}
inline void CAddDirectory::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CAddDirectory.name)
}
inline std::string* CAddDirectory::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CAddDirectory.name)
  return _internal_mutable_name();
}
inline const std::string& CAddDirectory::_internal_name() const {
  return name_.Get();
}
inline void CAddDirectory::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CAddDirectory::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CAddDirectory.name)
}
inline void CAddDirectory::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CAddDirectory.name)
}
inline void CAddDirectory::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CAddDirectory.name)
}
inline std::string* CAddDirectory::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CAddDirectory::release_name() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CAddDirectory.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CAddDirectory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CAddDirectory.name)
}

// -------------------------------------------------------------------

// CDeleteDirectory

// string directory_id = 1;
inline void CDeleteDirectory::clear_directory_id() {
  directory_id_.ClearToEmpty();
}
inline const std::string& CDeleteDirectory::directory_id() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CDeleteDirectory.directory_id)
  return _internal_directory_id();
}
inline void CDeleteDirectory::set_directory_id(const std::string& value) {
  _internal_set_directory_id(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CDeleteDirectory.directory_id)
}
inline std::string* CDeleteDirectory::mutable_directory_id() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CDeleteDirectory.directory_id)
  return _internal_mutable_directory_id();
}
inline const std::string& CDeleteDirectory::_internal_directory_id() const {
  return directory_id_.Get();
}
inline void CDeleteDirectory::_internal_set_directory_id(const std::string& value) {
  
  directory_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDeleteDirectory::set_directory_id(std::string&& value) {
  
  directory_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CDeleteDirectory.directory_id)
}
inline void CDeleteDirectory::set_directory_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  directory_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CDeleteDirectory.directory_id)
}
inline void CDeleteDirectory::set_directory_id(const char* value,
    size_t size) {
  
  directory_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CDeleteDirectory.directory_id)
}
inline std::string* CDeleteDirectory::_internal_mutable_directory_id() {
  
  return directory_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDeleteDirectory::release_directory_id() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CDeleteDirectory.directory_id)
  return directory_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDeleteDirectory::set_allocated_directory_id(std::string* directory_id) {
  if (directory_id != nullptr) {
    
  } else {
    
  }
  directory_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), directory_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CDeleteDirectory.directory_id)
}

// -------------------------------------------------------------------

// CModifyUser

// int32 type = 1;
inline void CModifyUser::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CModifyUser::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CModifyUser::type() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CModifyUser.type)
  return _internal_type();
}
inline void CModifyUser::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CModifyUser::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CModifyUser.type)
}

// string content = 2;
inline void CModifyUser::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& CModifyUser::content() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.CModifyUser.content)
  return _internal_content();
}
inline void CModifyUser::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.CModifyUser.content)
}
inline std::string* CModifyUser::mutable_content() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.CModifyUser.content)
  return _internal_mutable_content();
}
inline const std::string& CModifyUser::_internal_content() const {
  return content_.Get();
}
inline void CModifyUser::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CModifyUser::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.CModifyUser.content)
}
inline void CModifyUser::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.CModifyUser.content)
}
inline void CModifyUser::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.CModifyUser.content)
}
inline std::string* CModifyUser::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CModifyUser::release_content() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.CModifyUser.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CModifyUser::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.CModifyUser.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SyncCloudDrive

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SyncCloudDrive::ClientCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SyncCloudDrive::ClientCommandType>() {
  return ::SyncCloudDrive::ClientCommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fto_5fserver_2eproto
