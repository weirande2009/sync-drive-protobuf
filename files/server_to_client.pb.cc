// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_to_client.proto

#include "server_to_client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SyncCloudDrive {
PROTOBUF_CONSTEXPR SRegister::SRegister(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct SRegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SRegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SRegisterDefaultTypeInternal() {}
  union {
    SRegister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SRegisterDefaultTypeInternal _SRegister_default_instance_;
PROTOBUF_CONSTEXPR SLogin::SLogin(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct SLoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SLoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SLoginDefaultTypeInternal() {}
  union {
    SLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SLoginDefaultTypeInternal _SLogin_default_instance_;
PROTOBUF_CONSTEXPR SSync_File::SSync_File(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , md5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SSync_FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSync_FileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSync_FileDefaultTypeInternal() {}
  union {
    SSync_File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSync_FileDefaultTypeInternal _SSync_File_default_instance_;
PROTOBUF_CONSTEXPR SSync_Directory::SSync_Directory(
    ::_pbi::ConstantInitialized)
  : sons_()
  , files_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SSync_DirectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSync_DirectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSync_DirectoryDefaultTypeInternal() {}
  union {
    SSync_Directory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSync_DirectoryDefaultTypeInternal _SSync_Directory_default_instance_;
PROTOBUF_CONSTEXPR SSync::SSync(
    ::_pbi::ConstantInitialized)
  : root_(nullptr)
  , state_(0){}
struct SSyncDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSyncDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSyncDefaultTypeInternal() {}
  union {
    SSync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSyncDefaultTypeInternal _SSync_default_instance_;
PROTOBUF_CONSTEXPR SUploadFile::SUploadFile(
    ::_pbi::ConstantInitialized)
  : no_(0)
  , slide_no_(0){}
struct SUploadFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SUploadFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SUploadFileDefaultTypeInternal() {}
  union {
    SUploadFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SUploadFileDefaultTypeInternal _SUploadFile_default_instance_;
PROTOBUF_CONSTEXPR SDownload::SDownload(
    ::_pbi::ConstantInitialized)
  : file_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , slide_no_(0){}
struct SDownloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDownloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDownloadDefaultTypeInternal() {}
  union {
    SDownload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDownloadDefaultTypeInternal _SDownload_default_instance_;
PROTOBUF_CONSTEXPR SDeleteFile::SDeleteFile(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct SDeleteFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDeleteFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDeleteFileDefaultTypeInternal() {}
  union {
    SDeleteFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDeleteFileDefaultTypeInternal _SDeleteFile_default_instance_;
PROTOBUF_CONSTEXPR SAddDirectory::SAddDirectory(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct SAddDirectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SAddDirectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SAddDirectoryDefaultTypeInternal() {}
  union {
    SAddDirectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SAddDirectoryDefaultTypeInternal _SAddDirectory_default_instance_;
PROTOBUF_CONSTEXPR SDeleteDirectory::SDeleteDirectory(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct SDeleteDirectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDeleteDirectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDeleteDirectoryDefaultTypeInternal() {}
  union {
    SDeleteDirectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDeleteDirectoryDefaultTypeInternal _SDeleteDirectory_default_instance_;
PROTOBUF_CONSTEXPR SModifyUser::SModifyUser(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct SModifyUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SModifyUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SModifyUserDefaultTypeInternal() {}
  union {
    SModifyUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SModifyUserDefaultTypeInternal _SModifyUser_default_instance_;
}  // namespace SyncCloudDrive
static ::_pb::Metadata file_level_metadata_server_5fto_5fclient_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_server_5fto_5fclient_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_server_5fto_5fclient_2eproto = nullptr;

const uint32_t TableStruct_server_5fto_5fclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SRegister, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SLogin, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_File, id_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_File, name_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_File, md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_Directory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_Directory, id_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_Directory, name_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_Directory, sons_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync_Directory, files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync, state_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SSync, root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SUploadFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SUploadFile, no_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SUploadFile, slide_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDownload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDownload, file_id_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDownload, slide_no_),
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDownload, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDeleteFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDeleteFile, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SAddDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SAddDirectory, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDeleteDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SDeleteDirectory, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SModifyUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SyncCloudDrive::SModifyUser, state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SyncCloudDrive::SRegister)},
  { 7, -1, -1, sizeof(::SyncCloudDrive::SLogin)},
  { 14, -1, -1, sizeof(::SyncCloudDrive::SSync_File)},
  { 23, -1, -1, sizeof(::SyncCloudDrive::SSync_Directory)},
  { 33, -1, -1, sizeof(::SyncCloudDrive::SSync)},
  { 41, -1, -1, sizeof(::SyncCloudDrive::SUploadFile)},
  { 49, -1, -1, sizeof(::SyncCloudDrive::SDownload)},
  { 58, -1, -1, sizeof(::SyncCloudDrive::SDeleteFile)},
  { 65, -1, -1, sizeof(::SyncCloudDrive::SAddDirectory)},
  { 72, -1, -1, sizeof(::SyncCloudDrive::SDeleteDirectory)},
  { 79, -1, -1, sizeof(::SyncCloudDrive::SModifyUser)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SyncCloudDrive::_SRegister_default_instance_._instance,
  &::SyncCloudDrive::_SLogin_default_instance_._instance,
  &::SyncCloudDrive::_SSync_File_default_instance_._instance,
  &::SyncCloudDrive::_SSync_Directory_default_instance_._instance,
  &::SyncCloudDrive::_SSync_default_instance_._instance,
  &::SyncCloudDrive::_SUploadFile_default_instance_._instance,
  &::SyncCloudDrive::_SDownload_default_instance_._instance,
  &::SyncCloudDrive::_SDeleteFile_default_instance_._instance,
  &::SyncCloudDrive::_SAddDirectory_default_instance_._instance,
  &::SyncCloudDrive::_SDeleteDirectory_default_instance_._instance,
  &::SyncCloudDrive::_SModifyUser_default_instance_._instance,
};

const char descriptor_table_protodef_server_5fto_5fclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026server_to_client.proto\022\016SyncCloudDrive"
  "\"\032\n\tSRegister\022\r\n\005state\030\001 \001(\005\"\027\n\006SLogin\022\r"
  "\n\005state\030\001 \001(\005\"\365\001\n\005SSync\022\r\n\005state\030\001 \001(\005\022-"
  "\n\004root\030\002 \001(\0132\037.SyncCloudDrive.SSync.Dire"
  "ctory\032-\n\004File\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022"
  "\013\n\003md5\030\003 \001(\t\032\177\n\tDirectory\022\n\n\002id\030\001 \001(\t\022\014\n"
  "\004name\030\002 \001(\t\022-\n\004sons\030\003 \003(\0132\037.SyncCloudDri"
  "ve.SSync.Directory\022)\n\005files\030\004 \003(\0132\032.Sync"
  "CloudDrive.SSync.File\"+\n\013SUploadFile\022\n\n\002"
  "no\030\001 \001(\005\022\020\n\010slide_no\030\002 \001(\005\"<\n\tSDownload\022"
  "\017\n\007file_id\030\001 \001(\t\022\020\n\010slide_no\030\002 \001(\005\022\014\n\004da"
  "ta\030\003 \001(\t\"\034\n\013SDeleteFile\022\r\n\005state\030\001 \001(\005\"\036"
  "\n\rSAddDirectory\022\r\n\005state\030\001 \001(\005\"!\n\020SDelet"
  "eDirectory\022\r\n\005state\030\001 \001(\005\"\034\n\013SModifyUser"
  "\022\r\n\005state\030\001 \001(\005*\262\001\n\021ServerCommandType\022\016\n"
  "\nS_REGISTER\020\000\022\013\n\007S_LOGIN\020\001\022\n\n\006S_SYNC\020\002\022\021"
  "\n\rS_UPLOAD_FILE\020\003\022\016\n\nS_DOWNLOAD\020\004\022\021\n\rS_D"
  "ELETE_FILE\020\005\022\023\n\017S_ADD_DIRECTORY\020\006\022\026\n\022S_D"
  "ELETE_DIRECTORY\020\007\022\021\n\rS_MODIFY_USER\020\010b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_server_5fto_5fclient_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_server_5fto_5fclient_2eproto = {
    false, false, 764, descriptor_table_protodef_server_5fto_5fclient_2eproto,
    "server_to_client.proto",
    &descriptor_table_server_5fto_5fclient_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_server_5fto_5fclient_2eproto::offsets,
    file_level_metadata_server_5fto_5fclient_2eproto, file_level_enum_descriptors_server_5fto_5fclient_2eproto,
    file_level_service_descriptors_server_5fto_5fclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_server_5fto_5fclient_2eproto_getter() {
  return &descriptor_table_server_5fto_5fclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_server_5fto_5fclient_2eproto(&descriptor_table_server_5fto_5fclient_2eproto);
namespace SyncCloudDrive {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fto_5fclient_2eproto);
  return file_level_enum_descriptors_server_5fto_5fclient_2eproto[0];
}
bool ServerCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SRegister::_Internal {
 public:
};

SRegister::SRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SRegister)
}
SRegister::SRegister(const SRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SRegister)
}

inline void SRegister::SharedCtor() {
state_ = 0;
}

SRegister::~SRegister() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SRegister)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SRegister)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SRegister::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SRegister::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SRegister)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SRegister)
  return target;
}

size_t SRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SRegister)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SRegister::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SRegister::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SRegister::GetClassData() const { return &_class_data_; }

void SRegister::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SRegister *>(to)->MergeFrom(
      static_cast<const SRegister &>(from));
}


void SRegister::MergeFrom(const SRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SRegister)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SRegister::CopyFrom(const SRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRegister::IsInitialized() const {
  return true;
}

void SRegister::InternalSwap(SRegister* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRegister::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fto_5fclient_2eproto_getter, &descriptor_table_server_5fto_5fclient_2eproto_once,
      file_level_metadata_server_5fto_5fclient_2eproto[0]);
}

// ===================================================================

class SLogin::_Internal {
 public:
};

SLogin::SLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SLogin)
}
SLogin::SLogin(const SLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SLogin)
}

inline void SLogin::SharedCtor() {
state_ = 0;
}

SLogin::~SLogin() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SLogin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLogin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SLogin)
  return target;
}

size_t SLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLogin::GetClassData() const { return &_class_data_; }

void SLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLogin *>(to)->MergeFrom(
      static_cast<const SLogin &>(from));
}


void SLogin::MergeFrom(const SLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLogin::CopyFrom(const SLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLogin::IsInitialized() const {
  return true;
}

void SLogin::InternalSwap(SLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SLogin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fto_5fclient_2eproto_getter, &descriptor_table_server_5fto_5fclient_2eproto_once,
      file_level_metadata_server_5fto_5fclient_2eproto[1]);
}

// ===================================================================

class SSync_File::_Internal {
 public:
};

SSync_File::SSync_File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SSync.File)
}
SSync_File::SSync_File(const SSync_File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5().empty()) {
    md5_.Set(from._internal_md5(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SSync.File)
}

inline void SSync_File::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
md5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  md5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSync_File::~SSync_File() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SSync.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSync_File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  name_.Destroy();
  md5_.Destroy();
}

void SSync_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSync_File::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SSync.File)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  md5_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSync_File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.SSync.File.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.SSync.File.name"));
        } else
          goto handle_unusual;
        continue;
      // string md5 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.SSync.File.md5"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSync_File::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SSync.File)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SSync.File.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SSync.File.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string md5 = 3;
  if (!this->_internal_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SSync.File.md5");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SSync.File)
  return target;
}

size_t SSync_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SSync.File)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string md5 = 3;
  if (!this->_internal_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSync_File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSync_File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSync_File::GetClassData() const { return &_class_data_; }

void SSync_File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSync_File *>(to)->MergeFrom(
      static_cast<const SSync_File &>(from));
}


void SSync_File::MergeFrom(const SSync_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SSync.File)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_md5().empty()) {
    _internal_set_md5(from._internal_md5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSync_File::CopyFrom(const SSync_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SSync.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSync_File::IsInitialized() const {
  return true;
}

void SSync_File::InternalSwap(SSync_File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &md5_, lhs_arena,
      &other->md5_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SSync_File::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fto_5fclient_2eproto_getter, &descriptor_table_server_5fto_5fclient_2eproto_once,
      file_level_metadata_server_5fto_5fclient_2eproto[2]);
}

// ===================================================================

class SSync_Directory::_Internal {
 public:
};

SSync_Directory::SSync_Directory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sons_(arena),
  files_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SSync.Directory)
}
SSync_Directory::SSync_Directory(const SSync_Directory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sons_(from.sons_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SSync.Directory)
}

inline void SSync_Directory::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSync_Directory::~SSync_Directory() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SSync.Directory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSync_Directory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  name_.Destroy();
}

void SSync_Directory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSync_Directory::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SSync.Directory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sons_.Clear();
  files_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSync_Directory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.SSync.Directory.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.SSync.Directory.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .SyncCloudDrive.SSync.Directory sons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SyncCloudDrive.SSync.File files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSync_Directory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SSync.Directory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SSync.Directory.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SSync.Directory.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .SyncCloudDrive.SSync.Directory sons = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sons_size()); i < n; i++) {
    const auto& repfield = this->_internal_sons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SyncCloudDrive.SSync.File files = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SSync.Directory)
  return target;
}

size_t SSync_Directory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SSync.Directory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SyncCloudDrive.SSync.Directory sons = 3;
  total_size += 1UL * this->_internal_sons_size();
  for (const auto& msg : this->sons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SyncCloudDrive.SSync.File files = 4;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSync_Directory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSync_Directory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSync_Directory::GetClassData() const { return &_class_data_; }

void SSync_Directory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSync_Directory *>(to)->MergeFrom(
      static_cast<const SSync_Directory &>(from));
}


void SSync_Directory::MergeFrom(const SSync_Directory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SSync.Directory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sons_.MergeFrom(from.sons_);
  files_.MergeFrom(from.files_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSync_Directory::CopyFrom(const SSync_Directory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SSync.Directory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSync_Directory::IsInitialized() const {
  return true;
}

void SSync_Directory::InternalSwap(SSync_Directory* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sons_.InternalSwap(&other->sons_);
  files_.InternalSwap(&other->files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SSync_Directory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fto_5fclient_2eproto_getter, &descriptor_table_server_5fto_5fclient_2eproto_once,
      file_level_metadata_server_5fto_5fclient_2eproto[3]);
}

// ===================================================================

class SSync::_Internal {
 public:
  static const ::SyncCloudDrive::SSync_Directory& root(const SSync* msg);
};

const ::SyncCloudDrive::SSync_Directory&
SSync::_Internal::root(const SSync* msg) {
  return *msg->root_;
}
SSync::SSync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SSync)
}
SSync::SSync(const SSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_root()) {
    root_ = new ::SyncCloudDrive::SSync_Directory(*from.root_);
  } else {
    root_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SSync)
}

inline void SSync::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&root_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&root_)) + sizeof(state_));
}

SSync::~SSync() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SSync)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete root_;
}

void SSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SSync::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SSync)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSync::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SyncCloudDrive.SSync.Directory root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSync::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SSync)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // .SyncCloudDrive.SSync.Directory root = 2;
  if (this->_internal_has_root()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::root(this),
        _Internal::root(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SSync)
  return target;
}

size_t SSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SSync)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SyncCloudDrive.SSync.Directory root = 2;
  if (this->_internal_has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSync::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SSync::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSync::GetClassData() const { return &_class_data_; }

void SSync::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SSync *>(to)->MergeFrom(
      static_cast<const SSync &>(from));
}


void SSync::MergeFrom(const SSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SSync)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_root()) {
    _internal_mutable_root()->::SyncCloudDrive::SSync_Directory::MergeFrom(from._internal_root());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSync::CopyFrom(const SSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSync::IsInitialized() const {
  return true;
}

void SSync::InternalSwap(SSync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSync, state_)
      + sizeof(SSync::state_)
      - PROTOBUF_FIELD_OFFSET(SSync, root_)>(
          reinterpret_cast<char*>(&root_),
          reinterpret_cast<char*>(&other->root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSync::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fto_5fclient_2eproto_getter, &descriptor_table_server_5fto_5fclient_2eproto_once,
      file_level_metadata_server_5fto_5fclient_2eproto[4]);
}

// ===================================================================

class SUploadFile::_Internal {
 public:
};

SUploadFile::SUploadFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SUploadFile)
}
SUploadFile::SUploadFile(const SUploadFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&no_, &from.no_,
    static_cast<size_t>(reinterpret_cast<char*>(&slide_no_) -
    reinterpret_cast<char*>(&no_)) + sizeof(slide_no_));
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SUploadFile)
}

inline void SUploadFile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&no_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slide_no_) -
    reinterpret_cast<char*>(&no_)) + sizeof(slide_no_));
}

SUploadFile::~SUploadFile() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SUploadFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SUploadFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SUploadFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SUploadFile::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SUploadFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slide_no_) -
      reinterpret_cast<char*>(&no_)) + sizeof(slide_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SUploadFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slide_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slide_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SUploadFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SUploadFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 no = 1;
  if (this->_internal_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_no(), target);
  }

  // int32 slide_no = 2;
  if (this->_internal_slide_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_slide_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SUploadFile)
  return target;
}

size_t SUploadFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SUploadFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 no = 1;
  if (this->_internal_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_no());
  }

  // int32 slide_no = 2;
  if (this->_internal_slide_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slide_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SUploadFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SUploadFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SUploadFile::GetClassData() const { return &_class_data_; }

void SUploadFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SUploadFile *>(to)->MergeFrom(
      static_cast<const SUploadFile &>(from));
}


void SUploadFile::MergeFrom(const SUploadFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SUploadFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_no() != 0) {
    _internal_set_no(from._internal_no());
  }
  if (from._internal_slide_no() != 0) {
    _internal_set_slide_no(from._internal_slide_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SUploadFile::CopyFrom(const SUploadFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SUploadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUploadFile::IsInitialized() const {
  return true;
}

void SUploadFile::InternalSwap(SUploadFile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SUploadFile, slide_no_)
      + sizeof(SUploadFile::slide_no_)
      - PROTOBUF_FIELD_OFFSET(SUploadFile, no_)>(
          reinterpret_cast<char*>(&no_),
          reinterpret_cast<char*>(&other->no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SUploadFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fto_5fclient_2eproto_getter, &descriptor_table_server_5fto_5fclient_2eproto_once,
      file_level_metadata_server_5fto_5fclient_2eproto[5]);
}

// ===================================================================

class SDownload::_Internal {
 public:
};

SDownload::SDownload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SDownload)
}
SDownload::SDownload(const SDownload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_id().empty()) {
    file_id_.Set(from._internal_file_id(), 
      GetArenaForAllocation());
  }
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  slide_no_ = from.slide_no_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SDownload)
}

inline void SDownload::SharedCtor() {
file_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
slide_no_ = 0;
}

SDownload::~SDownload() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SDownload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDownload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_id_.Destroy();
  data_.Destroy();
}

void SDownload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SDownload::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SDownload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_id_.ClearToEmpty();
  data_.ClearToEmpty();
  slide_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDownload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.SDownload.file_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 slide_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slide_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SyncCloudDrive.SDownload.data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDownload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SDownload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_id = 1;
  if (!this->_internal_file_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SDownload.file_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_id(), target);
  }

  // int32 slide_no = 2;
  if (this->_internal_slide_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_slide_no(), target);
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncCloudDrive.SDownload.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SDownload)
  return target;
}

size_t SDownload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SDownload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_id = 1;
  if (!this->_internal_file_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_id());
  }

  // string data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int32 slide_no = 2;
  if (this->_internal_slide_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slide_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDownload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SDownload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDownload::GetClassData() const { return &_class_data_; }

void SDownload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SDownload *>(to)->MergeFrom(
      static_cast<const SDownload &>(from));
}


void SDownload::MergeFrom(const SDownload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SDownload)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_id().empty()) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_slide_no() != 0) {
    _internal_set_slide_no(from._internal_slide_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDownload::CopyFrom(const SDownload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SDownload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDownload::IsInitialized() const {
  return true;
}

void SDownload::InternalSwap(SDownload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_id_, lhs_arena,
      &other->file_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(slide_no_, other->slide_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDownload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fto_5fclient_2eproto_getter, &descriptor_table_server_5fto_5fclient_2eproto_once,
      file_level_metadata_server_5fto_5fclient_2eproto[6]);
}

// ===================================================================

class SDeleteFile::_Internal {
 public:
};

SDeleteFile::SDeleteFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SDeleteFile)
}
SDeleteFile::SDeleteFile(const SDeleteFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SDeleteFile)
}

inline void SDeleteFile::SharedCtor() {
state_ = 0;
}

SDeleteFile::~SDeleteFile() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SDeleteFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDeleteFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SDeleteFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SDeleteFile::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SDeleteFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDeleteFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDeleteFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SDeleteFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SDeleteFile)
  return target;
}

size_t SDeleteFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SDeleteFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDeleteFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SDeleteFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDeleteFile::GetClassData() const { return &_class_data_; }

void SDeleteFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SDeleteFile *>(to)->MergeFrom(
      static_cast<const SDeleteFile &>(from));
}


void SDeleteFile::MergeFrom(const SDeleteFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SDeleteFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDeleteFile::CopyFrom(const SDeleteFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SDeleteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDeleteFile::IsInitialized() const {
  return true;
}

void SDeleteFile::InternalSwap(SDeleteFile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDeleteFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fto_5fclient_2eproto_getter, &descriptor_table_server_5fto_5fclient_2eproto_once,
      file_level_metadata_server_5fto_5fclient_2eproto[7]);
}

// ===================================================================

class SAddDirectory::_Internal {
 public:
};

SAddDirectory::SAddDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SAddDirectory)
}
SAddDirectory::SAddDirectory(const SAddDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SAddDirectory)
}

inline void SAddDirectory::SharedCtor() {
state_ = 0;
}

SAddDirectory::~SAddDirectory() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SAddDirectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SAddDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SAddDirectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SAddDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SAddDirectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SAddDirectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SAddDirectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SAddDirectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SAddDirectory)
  return target;
}

size_t SAddDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SAddDirectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SAddDirectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SAddDirectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SAddDirectory::GetClassData() const { return &_class_data_; }

void SAddDirectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SAddDirectory *>(to)->MergeFrom(
      static_cast<const SAddDirectory &>(from));
}


void SAddDirectory::MergeFrom(const SAddDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SAddDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SAddDirectory::CopyFrom(const SAddDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SAddDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAddDirectory::IsInitialized() const {
  return true;
}

void SAddDirectory::InternalSwap(SAddDirectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SAddDirectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fto_5fclient_2eproto_getter, &descriptor_table_server_5fto_5fclient_2eproto_once,
      file_level_metadata_server_5fto_5fclient_2eproto[8]);
}

// ===================================================================

class SDeleteDirectory::_Internal {
 public:
};

SDeleteDirectory::SDeleteDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SDeleteDirectory)
}
SDeleteDirectory::SDeleteDirectory(const SDeleteDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SDeleteDirectory)
}

inline void SDeleteDirectory::SharedCtor() {
state_ = 0;
}

SDeleteDirectory::~SDeleteDirectory() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SDeleteDirectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDeleteDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SDeleteDirectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SDeleteDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SDeleteDirectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDeleteDirectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SDeleteDirectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SDeleteDirectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SDeleteDirectory)
  return target;
}

size_t SDeleteDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SDeleteDirectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDeleteDirectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SDeleteDirectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDeleteDirectory::GetClassData() const { return &_class_data_; }

void SDeleteDirectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SDeleteDirectory *>(to)->MergeFrom(
      static_cast<const SDeleteDirectory &>(from));
}


void SDeleteDirectory::MergeFrom(const SDeleteDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SDeleteDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SDeleteDirectory::CopyFrom(const SDeleteDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SDeleteDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDeleteDirectory::IsInitialized() const {
  return true;
}

void SDeleteDirectory::InternalSwap(SDeleteDirectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SDeleteDirectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fto_5fclient_2eproto_getter, &descriptor_table_server_5fto_5fclient_2eproto_once,
      file_level_metadata_server_5fto_5fclient_2eproto[9]);
}

// ===================================================================

class SModifyUser::_Internal {
 public:
};

SModifyUser::SModifyUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SyncCloudDrive.SModifyUser)
}
SModifyUser::SModifyUser(const SModifyUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:SyncCloudDrive.SModifyUser)
}

inline void SModifyUser::SharedCtor() {
state_ = 0;
}

SModifyUser::~SModifyUser() {
  // @@protoc_insertion_point(destructor:SyncCloudDrive.SModifyUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SModifyUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SModifyUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SModifyUser::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncCloudDrive.SModifyUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SModifyUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SModifyUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncCloudDrive.SModifyUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncCloudDrive.SModifyUser)
  return target;
}

size_t SModifyUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncCloudDrive.SModifyUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SModifyUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SModifyUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SModifyUser::GetClassData() const { return &_class_data_; }

void SModifyUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SModifyUser *>(to)->MergeFrom(
      static_cast<const SModifyUser &>(from));
}


void SModifyUser::MergeFrom(const SModifyUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncCloudDrive.SModifyUser)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SModifyUser::CopyFrom(const SModifyUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncCloudDrive.SModifyUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SModifyUser::IsInitialized() const {
  return true;
}

void SModifyUser::InternalSwap(SModifyUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SModifyUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fto_5fclient_2eproto_getter, &descriptor_table_server_5fto_5fclient_2eproto_once,
      file_level_metadata_server_5fto_5fclient_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SyncCloudDrive
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SRegister*
Arena::CreateMaybeMessage< ::SyncCloudDrive::SRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SLogin*
Arena::CreateMaybeMessage< ::SyncCloudDrive::SLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SSync_File*
Arena::CreateMaybeMessage< ::SyncCloudDrive::SSync_File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SSync_File >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SSync_Directory*
Arena::CreateMaybeMessage< ::SyncCloudDrive::SSync_Directory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SSync_Directory >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SSync*
Arena::CreateMaybeMessage< ::SyncCloudDrive::SSync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SSync >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SUploadFile*
Arena::CreateMaybeMessage< ::SyncCloudDrive::SUploadFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SUploadFile >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SDownload*
Arena::CreateMaybeMessage< ::SyncCloudDrive::SDownload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SDownload >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SDeleteFile*
Arena::CreateMaybeMessage< ::SyncCloudDrive::SDeleteFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SDeleteFile >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SAddDirectory*
Arena::CreateMaybeMessage< ::SyncCloudDrive::SAddDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SAddDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SDeleteDirectory*
Arena::CreateMaybeMessage< ::SyncCloudDrive::SDeleteDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SDeleteDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncCloudDrive::SModifyUser*
Arena::CreateMaybeMessage< ::SyncCloudDrive::SModifyUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncCloudDrive::SModifyUser >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
