// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_proto/server_to_client_frontend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto;
namespace SyncCloudDriveFrontend {
class SEnd;
struct SEndDefaultTypeInternal;
extern SEndDefaultTypeInternal _SEnd_default_instance_;
class SLogin;
struct SLoginDefaultTypeInternal;
extern SLoginDefaultTypeInternal _SLogin_default_instance_;
class SModifyUser;
struct SModifyUserDefaultTypeInternal;
extern SModifyUserDefaultTypeInternal _SModifyUser_default_instance_;
class SRegister;
struct SRegisterDefaultTypeInternal;
extern SRegisterDefaultTypeInternal _SRegister_default_instance_;
class SStart;
struct SStartDefaultTypeInternal;
extern SStartDefaultTypeInternal _SStart_default_instance_;
}  // namespace SyncCloudDriveFrontend
PROTOBUF_NAMESPACE_OPEN
template<> ::SyncCloudDriveFrontend::SEnd* Arena::CreateMaybeMessage<::SyncCloudDriveFrontend::SEnd>(Arena*);
template<> ::SyncCloudDriveFrontend::SLogin* Arena::CreateMaybeMessage<::SyncCloudDriveFrontend::SLogin>(Arena*);
template<> ::SyncCloudDriveFrontend::SModifyUser* Arena::CreateMaybeMessage<::SyncCloudDriveFrontend::SModifyUser>(Arena*);
template<> ::SyncCloudDriveFrontend::SRegister* Arena::CreateMaybeMessage<::SyncCloudDriveFrontend::SRegister>(Arena*);
template<> ::SyncCloudDriveFrontend::SStart* Arena::CreateMaybeMessage<::SyncCloudDriveFrontend::SStart>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SyncCloudDriveFrontend {

enum ServerCommandType : int {
  S_REGISTER = 0,
  S_LOGIN = 1,
  S_START = 2,
  S_END = 3,
  S_MODIFY_USER = 4,
  ServerCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerCommandType_IsValid(int value);
constexpr ServerCommandType ServerCommandType_MIN = S_REGISTER;
constexpr ServerCommandType ServerCommandType_MAX = S_MODIFY_USER;
constexpr int ServerCommandType_ARRAYSIZE = ServerCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor();
template<typename T>
inline const std::string& ServerCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerCommandType_descriptor(), enum_t_value);
}
inline bool ServerCommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerCommandType>(
    ServerCommandType_descriptor(), name, value);
}
// ===================================================================

class SRegister final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDriveFrontend.SRegister) */ {
 public:
  inline SRegister() : SRegister(nullptr) {}
  ~SRegister() override;
  explicit PROTOBUF_CONSTEXPR SRegister(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SRegister(const SRegister& from);
  SRegister(SRegister&& from) noexcept
    : SRegister() {
    *this = ::std::move(from);
  }

  inline SRegister& operator=(const SRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRegister& operator=(SRegister&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SRegister& default_instance() {
    return *internal_default_instance();
  }
  static inline const SRegister* internal_default_instance() {
    return reinterpret_cast<const SRegister*>(
               &_SRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SRegister& a, SRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(SRegister* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SRegister>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SRegister& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SRegister& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRegister* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDriveFrontend.SRegister";
  }
  protected:
  explicit SRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDriveFrontend.SRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto;
};
// -------------------------------------------------------------------

class SLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDriveFrontend.SLogin) */ {
 public:
  inline SLogin() : SLogin(nullptr) {}
  ~SLogin() override;
  explicit PROTOBUF_CONSTEXPR SLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLogin(const SLogin& from);
  SLogin(SLogin&& from) noexcept
    : SLogin() {
    *this = ::std::move(from);
  }

  inline SLogin& operator=(const SLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLogin& operator=(SLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLogin* internal_default_instance() {
    return reinterpret_cast<const SLogin*>(
               &_SLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLogin& a, SLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(SLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLogin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLogin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDriveFrontend.SLogin";
  }
  protected:
  explicit SLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDriveFrontend.SLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto;
};
// -------------------------------------------------------------------

class SStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDriveFrontend.SStart) */ {
 public:
  inline SStart() : SStart(nullptr) {}
  ~SStart() override;
  explicit PROTOBUF_CONSTEXPR SStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SStart(const SStart& from);
  SStart(SStart&& from) noexcept
    : SStart() {
    *this = ::std::move(from);
  }

  inline SStart& operator=(const SStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline SStart& operator=(SStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const SStart* internal_default_instance() {
    return reinterpret_cast<const SStart*>(
               &_SStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SStart& a, SStart& b) {
    a.Swap(&b);
  }
  inline void Swap(SStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SStart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDriveFrontend.SStart";
  }
  protected:
  explicit SStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDriveFrontend.SStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto;
};
// -------------------------------------------------------------------

class SEnd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDriveFrontend.SEnd) */ {
 public:
  inline SEnd() : SEnd(nullptr) {}
  ~SEnd() override;
  explicit PROTOBUF_CONSTEXPR SEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SEnd(const SEnd& from);
  SEnd(SEnd&& from) noexcept
    : SEnd() {
    *this = ::std::move(from);
  }

  inline SEnd& operator=(const SEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SEnd& operator=(SEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const SEnd* internal_default_instance() {
    return reinterpret_cast<const SEnd*>(
               &_SEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SEnd& a, SEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SEnd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SEnd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDriveFrontend.SEnd";
  }
  protected:
  explicit SEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDriveFrontend.SEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto;
};
// -------------------------------------------------------------------

class SModifyUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDriveFrontend.SModifyUser) */ {
 public:
  inline SModifyUser() : SModifyUser(nullptr) {}
  ~SModifyUser() override;
  explicit PROTOBUF_CONSTEXPR SModifyUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SModifyUser(const SModifyUser& from);
  SModifyUser(SModifyUser&& from) noexcept
    : SModifyUser() {
    *this = ::std::move(from);
  }

  inline SModifyUser& operator=(const SModifyUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline SModifyUser& operator=(SModifyUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SModifyUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const SModifyUser* internal_default_instance() {
    return reinterpret_cast<const SModifyUser*>(
               &_SModifyUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SModifyUser& a, SModifyUser& b) {
    a.Swap(&b);
  }
  inline void Swap(SModifyUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SModifyUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SModifyUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SModifyUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SModifyUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SModifyUser& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SModifyUser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDriveFrontend.SModifyUser";
  }
  protected:
  explicit SModifyUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDriveFrontend.SModifyUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SRegister

// int32 state = 1;
inline void SRegister::clear_state() {
  state_ = 0;
}
inline int32_t SRegister::_internal_state() const {
  return state_;
}
inline int32_t SRegister::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.SRegister.state)
  return _internal_state();
}
inline void SRegister::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void SRegister::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.SRegister.state)
}

// -------------------------------------------------------------------

// SLogin

// int32 state = 1;
inline void SLogin::clear_state() {
  state_ = 0;
}
inline int32_t SLogin::_internal_state() const {
  return state_;
}
inline int32_t SLogin::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.SLogin.state)
  return _internal_state();
}
inline void SLogin::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void SLogin::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.SLogin.state)
}

// -------------------------------------------------------------------

// SStart

// int32 state = 1;
inline void SStart::clear_state() {
  state_ = 0;
}
inline int32_t SStart::_internal_state() const {
  return state_;
}
inline int32_t SStart::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.SStart.state)
  return _internal_state();
}
inline void SStart::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void SStart::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.SStart.state)
}

// -------------------------------------------------------------------

// SEnd

// int32 state = 1;
inline void SEnd::clear_state() {
  state_ = 0;
}
inline int32_t SEnd::_internal_state() const {
  return state_;
}
inline int32_t SEnd::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.SEnd.state)
  return _internal_state();
}
inline void SEnd::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void SEnd::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.SEnd.state)
}

// -------------------------------------------------------------------

// SModifyUser

// int32 state = 1;
inline void SModifyUser::clear_state() {
  state_ = 0;
}
inline int32_t SModifyUser::_internal_state() const {
  return state_;
}
inline int32_t SModifyUser::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.SModifyUser.state)
  return _internal_state();
}
inline void SModifyUser::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void SModifyUser::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.SModifyUser.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SyncCloudDriveFrontend

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SyncCloudDriveFrontend::ServerCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SyncCloudDriveFrontend::ServerCommandType>() {
  return ::SyncCloudDriveFrontend::ServerCommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_5fproto_2fserver_5fto_5fclient_5ffrontend_2eproto
