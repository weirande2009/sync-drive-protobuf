// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_to_client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fto_5fclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fto_5fclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fto_5fclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fto_5fclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fto_5fclient_2eproto;
namespace SyncCloudDrive {
class SAddDirectory;
class SAddDirectoryDefaultTypeInternal;
extern SAddDirectoryDefaultTypeInternal _SAddDirectory_default_instance_;
class SDeleteDirectory;
class SDeleteDirectoryDefaultTypeInternal;
extern SDeleteDirectoryDefaultTypeInternal _SDeleteDirectory_default_instance_;
class SDeleteFile;
class SDeleteFileDefaultTypeInternal;
extern SDeleteFileDefaultTypeInternal _SDeleteFile_default_instance_;
class SDownload;
class SDownloadDefaultTypeInternal;
extern SDownloadDefaultTypeInternal _SDownload_default_instance_;
class SLogin;
class SLoginDefaultTypeInternal;
extern SLoginDefaultTypeInternal _SLogin_default_instance_;
class SModifyUser;
class SModifyUserDefaultTypeInternal;
extern SModifyUserDefaultTypeInternal _SModifyUser_default_instance_;
class SRegister;
class SRegisterDefaultTypeInternal;
extern SRegisterDefaultTypeInternal _SRegister_default_instance_;
class SSync;
class SSyncDefaultTypeInternal;
extern SSyncDefaultTypeInternal _SSync_default_instance_;
class SSync_Directory;
class SSync_DirectoryDefaultTypeInternal;
extern SSync_DirectoryDefaultTypeInternal _SSync_Directory_default_instance_;
class SSync_File;
class SSync_FileDefaultTypeInternal;
extern SSync_FileDefaultTypeInternal _SSync_File_default_instance_;
class SUploadFile;
class SUploadFileDefaultTypeInternal;
extern SUploadFileDefaultTypeInternal _SUploadFile_default_instance_;
}  // namespace SyncCloudDrive
PROTOBUF_NAMESPACE_OPEN
template<> ::SyncCloudDrive::SAddDirectory* Arena::CreateMaybeMessage<::SyncCloudDrive::SAddDirectory>(Arena*);
template<> ::SyncCloudDrive::SDeleteDirectory* Arena::CreateMaybeMessage<::SyncCloudDrive::SDeleteDirectory>(Arena*);
template<> ::SyncCloudDrive::SDeleteFile* Arena::CreateMaybeMessage<::SyncCloudDrive::SDeleteFile>(Arena*);
template<> ::SyncCloudDrive::SDownload* Arena::CreateMaybeMessage<::SyncCloudDrive::SDownload>(Arena*);
template<> ::SyncCloudDrive::SLogin* Arena::CreateMaybeMessage<::SyncCloudDrive::SLogin>(Arena*);
template<> ::SyncCloudDrive::SModifyUser* Arena::CreateMaybeMessage<::SyncCloudDrive::SModifyUser>(Arena*);
template<> ::SyncCloudDrive::SRegister* Arena::CreateMaybeMessage<::SyncCloudDrive::SRegister>(Arena*);
template<> ::SyncCloudDrive::SSync* Arena::CreateMaybeMessage<::SyncCloudDrive::SSync>(Arena*);
template<> ::SyncCloudDrive::SSync_Directory* Arena::CreateMaybeMessage<::SyncCloudDrive::SSync_Directory>(Arena*);
template<> ::SyncCloudDrive::SSync_File* Arena::CreateMaybeMessage<::SyncCloudDrive::SSync_File>(Arena*);
template<> ::SyncCloudDrive::SUploadFile* Arena::CreateMaybeMessage<::SyncCloudDrive::SUploadFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SyncCloudDrive {

enum ServerCommandType : int {
  S_REGISTER = 0,
  S_LOGIN = 1,
  S_SYNC = 2,
  S_UPLOAD_FILE = 3,
  S_DOWNLOAD = 4,
  S_DELETE_FILE = 5,
  S_ADD_DIRECTORY = 6,
  S_DELETE_DIRECTORY = 7,
  S_MODIFY_USER = 8,
  ServerCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerCommandType_IsValid(int value);
constexpr ServerCommandType ServerCommandType_MIN = S_REGISTER;
constexpr ServerCommandType ServerCommandType_MAX = S_MODIFY_USER;
constexpr int ServerCommandType_ARRAYSIZE = ServerCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor();
template<typename T>
inline const std::string& ServerCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerCommandType_descriptor(), enum_t_value);
}
inline bool ServerCommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerCommandType>(
    ServerCommandType_descriptor(), name, value);
}
// ===================================================================

class SRegister PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.SRegister) */ {
 public:
  inline SRegister() : SRegister(nullptr) {}
  virtual ~SRegister();

  SRegister(const SRegister& from);
  SRegister(SRegister&& from) noexcept
    : SRegister() {
    *this = ::std::move(from);
  }

  inline SRegister& operator=(const SRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRegister& operator=(SRegister&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRegister& default_instance();

  static inline const SRegister* internal_default_instance() {
    return reinterpret_cast<const SRegister*>(
               &_SRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SRegister& a, SRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(SRegister* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRegister* New() const final {
    return CreateMaybeMessage<SRegister>(nullptr);
  }

  SRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRegister& from);
  void MergeFrom(const SRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.SRegister";
  }
  protected:
  explicit SRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fto_5fclient_2eproto);
    return ::descriptor_table_server_5fto_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.SRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fto_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.SLogin) */ {
 public:
  inline SLogin() : SLogin(nullptr) {}
  virtual ~SLogin();

  SLogin(const SLogin& from);
  SLogin(SLogin&& from) noexcept
    : SLogin() {
    *this = ::std::move(from);
  }

  inline SLogin& operator=(const SLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLogin& operator=(SLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SLogin& default_instance();

  static inline const SLogin* internal_default_instance() {
    return reinterpret_cast<const SLogin*>(
               &_SLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SLogin& a, SLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(SLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SLogin* New() const final {
    return CreateMaybeMessage<SLogin>(nullptr);
  }

  SLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SLogin& from);
  void MergeFrom(const SLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.SLogin";
  }
  protected:
  explicit SLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fto_5fclient_2eproto);
    return ::descriptor_table_server_5fto_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.SLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fto_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SSync_File PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.SSync.File) */ {
 public:
  inline SSync_File() : SSync_File(nullptr) {}
  virtual ~SSync_File();

  SSync_File(const SSync_File& from);
  SSync_File(SSync_File&& from) noexcept
    : SSync_File() {
    *this = ::std::move(from);
  }

  inline SSync_File& operator=(const SSync_File& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSync_File& operator=(SSync_File&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSync_File& default_instance();

  static inline const SSync_File* internal_default_instance() {
    return reinterpret_cast<const SSync_File*>(
               &_SSync_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SSync_File& a, SSync_File& b) {
    a.Swap(&b);
  }
  inline void Swap(SSync_File* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSync_File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSync_File* New() const final {
    return CreateMaybeMessage<SSync_File>(nullptr);
  }

  SSync_File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSync_File>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSync_File& from);
  void MergeFrom(const SSync_File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSync_File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.SSync.File";
  }
  protected:
  explicit SSync_File(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fto_5fclient_2eproto);
    return ::descriptor_table_server_5fto_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kMd5FieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string md5 = 3;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.SSync.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fto_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SSync_Directory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.SSync.Directory) */ {
 public:
  inline SSync_Directory() : SSync_Directory(nullptr) {}
  virtual ~SSync_Directory();

  SSync_Directory(const SSync_Directory& from);
  SSync_Directory(SSync_Directory&& from) noexcept
    : SSync_Directory() {
    *this = ::std::move(from);
  }

  inline SSync_Directory& operator=(const SSync_Directory& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSync_Directory& operator=(SSync_Directory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSync_Directory& default_instance();

  static inline const SSync_Directory* internal_default_instance() {
    return reinterpret_cast<const SSync_Directory*>(
               &_SSync_Directory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SSync_Directory& a, SSync_Directory& b) {
    a.Swap(&b);
  }
  inline void Swap(SSync_Directory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSync_Directory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSync_Directory* New() const final {
    return CreateMaybeMessage<SSync_Directory>(nullptr);
  }

  SSync_Directory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSync_Directory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSync_Directory& from);
  void MergeFrom(const SSync_Directory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSync_Directory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.SSync.Directory";
  }
  protected:
  explicit SSync_Directory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fto_5fclient_2eproto);
    return ::descriptor_table_server_5fto_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSonsFieldNumber = 3,
    kFilesFieldNumber = 4,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated .SyncCloudDrive.SSync.Directory sons = 3;
  int sons_size() const;
  private:
  int _internal_sons_size() const;
  public:
  void clear_sons();
  ::SyncCloudDrive::SSync_Directory* mutable_sons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncCloudDrive::SSync_Directory >*
      mutable_sons();
  private:
  const ::SyncCloudDrive::SSync_Directory& _internal_sons(int index) const;
  ::SyncCloudDrive::SSync_Directory* _internal_add_sons();
  public:
  const ::SyncCloudDrive::SSync_Directory& sons(int index) const;
  ::SyncCloudDrive::SSync_Directory* add_sons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncCloudDrive::SSync_Directory >&
      sons() const;

  // repeated .SyncCloudDrive.SSync.File files = 4;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::SyncCloudDrive::SSync_File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncCloudDrive::SSync_File >*
      mutable_files();
  private:
  const ::SyncCloudDrive::SSync_File& _internal_files(int index) const;
  ::SyncCloudDrive::SSync_File* _internal_add_files();
  public:
  const ::SyncCloudDrive::SSync_File& files(int index) const;
  ::SyncCloudDrive::SSync_File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncCloudDrive::SSync_File >&
      files() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.SSync.Directory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncCloudDrive::SSync_Directory > sons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncCloudDrive::SSync_File > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fto_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SSync PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.SSync) */ {
 public:
  inline SSync() : SSync(nullptr) {}
  virtual ~SSync();

  SSync(const SSync& from);
  SSync(SSync&& from) noexcept
    : SSync() {
    *this = ::std::move(from);
  }

  inline SSync& operator=(const SSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSync& operator=(SSync&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSync& default_instance();

  static inline const SSync* internal_default_instance() {
    return reinterpret_cast<const SSync*>(
               &_SSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SSync& a, SSync& b) {
    a.Swap(&b);
  }
  inline void Swap(SSync* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSync* New() const final {
    return CreateMaybeMessage<SSync>(nullptr);
  }

  SSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSync& from);
  void MergeFrom(const SSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.SSync";
  }
  protected:
  explicit SSync(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fto_5fclient_2eproto);
    return ::descriptor_table_server_5fto_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SSync_File File;
  typedef SSync_Directory Directory;

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // .SyncCloudDrive.SSync.Directory root = 2;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::SyncCloudDrive::SSync_Directory& root() const;
  ::SyncCloudDrive::SSync_Directory* release_root();
  ::SyncCloudDrive::SSync_Directory* mutable_root();
  void set_allocated_root(::SyncCloudDrive::SSync_Directory* root);
  private:
  const ::SyncCloudDrive::SSync_Directory& _internal_root() const;
  ::SyncCloudDrive::SSync_Directory* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::SyncCloudDrive::SSync_Directory* root);
  ::SyncCloudDrive::SSync_Directory* unsafe_arena_release_root();

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.SSync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SyncCloudDrive::SSync_Directory* root_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fto_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SUploadFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.SUploadFile) */ {
 public:
  inline SUploadFile() : SUploadFile(nullptr) {}
  virtual ~SUploadFile();

  SUploadFile(const SUploadFile& from);
  SUploadFile(SUploadFile&& from) noexcept
    : SUploadFile() {
    *this = ::std::move(from);
  }

  inline SUploadFile& operator=(const SUploadFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUploadFile& operator=(SUploadFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SUploadFile& default_instance();

  static inline const SUploadFile* internal_default_instance() {
    return reinterpret_cast<const SUploadFile*>(
               &_SUploadFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SUploadFile& a, SUploadFile& b) {
    a.Swap(&b);
  }
  inline void Swap(SUploadFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SUploadFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SUploadFile* New() const final {
    return CreateMaybeMessage<SUploadFile>(nullptr);
  }

  SUploadFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SUploadFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SUploadFile& from);
  void MergeFrom(const SUploadFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUploadFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.SUploadFile";
  }
  protected:
  explicit SUploadFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fto_5fclient_2eproto);
    return ::descriptor_table_server_5fto_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoFieldNumber = 1,
    kSlideNoFieldNumber = 2,
  };
  // int32 no = 1;
  void clear_no();
  ::PROTOBUF_NAMESPACE_ID::int32 no() const;
  void set_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_no() const;
  void _internal_set_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 slide_no = 2;
  void clear_slide_no();
  ::PROTOBUF_NAMESPACE_ID::int32 slide_no() const;
  void set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slide_no() const;
  void _internal_set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.SUploadFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 no_;
  ::PROTOBUF_NAMESPACE_ID::int32 slide_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fto_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SDownload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.SDownload) */ {
 public:
  inline SDownload() : SDownload(nullptr) {}
  virtual ~SDownload();

  SDownload(const SDownload& from);
  SDownload(SDownload&& from) noexcept
    : SDownload() {
    *this = ::std::move(from);
  }

  inline SDownload& operator=(const SDownload& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDownload& operator=(SDownload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDownload& default_instance();

  static inline const SDownload* internal_default_instance() {
    return reinterpret_cast<const SDownload*>(
               &_SDownload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SDownload& a, SDownload& b) {
    a.Swap(&b);
  }
  inline void Swap(SDownload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDownload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SDownload* New() const final {
    return CreateMaybeMessage<SDownload>(nullptr);
  }

  SDownload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDownload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDownload& from);
  void MergeFrom(const SDownload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDownload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.SDownload";
  }
  protected:
  explicit SDownload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fto_5fclient_2eproto);
    return ::descriptor_table_server_5fto_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 1,
    kDataFieldNumber = 3,
    kSlideNoFieldNumber = 2,
  };
  // string file_id = 1;
  void clear_file_id();
  const std::string& file_id() const;
  void set_file_id(const std::string& value);
  void set_file_id(std::string&& value);
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  std::string* mutable_file_id();
  std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);
  private:
  const std::string& _internal_file_id() const;
  void _internal_set_file_id(const std::string& value);
  std::string* _internal_mutable_file_id();
  public:

  // string data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 slide_no = 2;
  void clear_slide_no();
  ::PROTOBUF_NAMESPACE_ID::int32 slide_no() const;
  void set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slide_no() const;
  void _internal_set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.SDownload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 slide_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fto_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SDeleteFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.SDeleteFile) */ {
 public:
  inline SDeleteFile() : SDeleteFile(nullptr) {}
  virtual ~SDeleteFile();

  SDeleteFile(const SDeleteFile& from);
  SDeleteFile(SDeleteFile&& from) noexcept
    : SDeleteFile() {
    *this = ::std::move(from);
  }

  inline SDeleteFile& operator=(const SDeleteFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDeleteFile& operator=(SDeleteFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDeleteFile& default_instance();

  static inline const SDeleteFile* internal_default_instance() {
    return reinterpret_cast<const SDeleteFile*>(
               &_SDeleteFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SDeleteFile& a, SDeleteFile& b) {
    a.Swap(&b);
  }
  inline void Swap(SDeleteFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDeleteFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SDeleteFile* New() const final {
    return CreateMaybeMessage<SDeleteFile>(nullptr);
  }

  SDeleteFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDeleteFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDeleteFile& from);
  void MergeFrom(const SDeleteFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDeleteFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.SDeleteFile";
  }
  protected:
  explicit SDeleteFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fto_5fclient_2eproto);
    return ::descriptor_table_server_5fto_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.SDeleteFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fto_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SAddDirectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.SAddDirectory) */ {
 public:
  inline SAddDirectory() : SAddDirectory(nullptr) {}
  virtual ~SAddDirectory();

  SAddDirectory(const SAddDirectory& from);
  SAddDirectory(SAddDirectory&& from) noexcept
    : SAddDirectory() {
    *this = ::std::move(from);
  }

  inline SAddDirectory& operator=(const SAddDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAddDirectory& operator=(SAddDirectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAddDirectory& default_instance();

  static inline const SAddDirectory* internal_default_instance() {
    return reinterpret_cast<const SAddDirectory*>(
               &_SAddDirectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SAddDirectory& a, SAddDirectory& b) {
    a.Swap(&b);
  }
  inline void Swap(SAddDirectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SAddDirectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAddDirectory* New() const final {
    return CreateMaybeMessage<SAddDirectory>(nullptr);
  }

  SAddDirectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAddDirectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAddDirectory& from);
  void MergeFrom(const SAddDirectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAddDirectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.SAddDirectory";
  }
  protected:
  explicit SAddDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fto_5fclient_2eproto);
    return ::descriptor_table_server_5fto_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.SAddDirectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fto_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SDeleteDirectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.SDeleteDirectory) */ {
 public:
  inline SDeleteDirectory() : SDeleteDirectory(nullptr) {}
  virtual ~SDeleteDirectory();

  SDeleteDirectory(const SDeleteDirectory& from);
  SDeleteDirectory(SDeleteDirectory&& from) noexcept
    : SDeleteDirectory() {
    *this = ::std::move(from);
  }

  inline SDeleteDirectory& operator=(const SDeleteDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDeleteDirectory& operator=(SDeleteDirectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDeleteDirectory& default_instance();

  static inline const SDeleteDirectory* internal_default_instance() {
    return reinterpret_cast<const SDeleteDirectory*>(
               &_SDeleteDirectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SDeleteDirectory& a, SDeleteDirectory& b) {
    a.Swap(&b);
  }
  inline void Swap(SDeleteDirectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDeleteDirectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SDeleteDirectory* New() const final {
    return CreateMaybeMessage<SDeleteDirectory>(nullptr);
  }

  SDeleteDirectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDeleteDirectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDeleteDirectory& from);
  void MergeFrom(const SDeleteDirectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDeleteDirectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.SDeleteDirectory";
  }
  protected:
  explicit SDeleteDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fto_5fclient_2eproto);
    return ::descriptor_table_server_5fto_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.SDeleteDirectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fto_5fclient_2eproto;
};
// -------------------------------------------------------------------

class SModifyUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDrive.SModifyUser) */ {
 public:
  inline SModifyUser() : SModifyUser(nullptr) {}
  virtual ~SModifyUser();

  SModifyUser(const SModifyUser& from);
  SModifyUser(SModifyUser&& from) noexcept
    : SModifyUser() {
    *this = ::std::move(from);
  }

  inline SModifyUser& operator=(const SModifyUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline SModifyUser& operator=(SModifyUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SModifyUser& default_instance();

  static inline const SModifyUser* internal_default_instance() {
    return reinterpret_cast<const SModifyUser*>(
               &_SModifyUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SModifyUser& a, SModifyUser& b) {
    a.Swap(&b);
  }
  inline void Swap(SModifyUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SModifyUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SModifyUser* New() const final {
    return CreateMaybeMessage<SModifyUser>(nullptr);
  }

  SModifyUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SModifyUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SModifyUser& from);
  void MergeFrom(const SModifyUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SModifyUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDrive.SModifyUser";
  }
  protected:
  explicit SModifyUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fto_5fclient_2eproto);
    return ::descriptor_table_server_5fto_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDrive.SModifyUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fto_5fclient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SRegister

// int32 state = 1;
inline void SRegister::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRegister::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRegister::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SRegister.state)
  return _internal_state();
}
inline void SRegister::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SRegister::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SRegister.state)
}

// -------------------------------------------------------------------

// SLogin

// int32 state = 1;
inline void SLogin::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLogin::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SLogin::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SLogin.state)
  return _internal_state();
}
inline void SLogin::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SLogin::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SLogin.state)
}

// -------------------------------------------------------------------

// SSync_File

// string id = 1;
inline void SSync_File::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& SSync_File::id() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SSync.File.id)
  return _internal_id();
}
inline void SSync_File::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SSync.File.id)
}
inline std::string* SSync_File::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.SSync.File.id)
  return _internal_mutable_id();
}
inline const std::string& SSync_File::_internal_id() const {
  return id_.Get();
}
inline void SSync_File::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SSync_File::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.SSync.File.id)
}
inline void SSync_File::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.SSync.File.id)
}
inline void SSync_File::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.SSync.File.id)
}
inline std::string* SSync_File::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SSync_File::release_id() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.SSync.File.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SSync_File::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.SSync.File.id)
}

// string name = 2;
inline void SSync_File::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SSync_File::name() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SSync.File.name)
  return _internal_name();
}
inline void SSync_File::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SSync.File.name)
}
inline std::string* SSync_File::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.SSync.File.name)
  return _internal_mutable_name();
}
inline const std::string& SSync_File::_internal_name() const {
  return name_.Get();
}
inline void SSync_File::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SSync_File::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.SSync.File.name)
}
inline void SSync_File::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.SSync.File.name)
}
inline void SSync_File::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.SSync.File.name)
}
inline std::string* SSync_File::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SSync_File::release_name() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.SSync.File.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SSync_File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.SSync.File.name)
}

// string md5 = 3;
inline void SSync_File::clear_md5() {
  md5_.ClearToEmpty();
}
inline const std::string& SSync_File::md5() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SSync.File.md5)
  return _internal_md5();
}
inline void SSync_File::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SSync.File.md5)
}
inline std::string* SSync_File::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.SSync.File.md5)
  return _internal_mutable_md5();
}
inline const std::string& SSync_File::_internal_md5() const {
  return md5_.Get();
}
inline void SSync_File::_internal_set_md5(const std::string& value) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SSync_File::set_md5(std::string&& value) {
  
  md5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.SSync.File.md5)
}
inline void SSync_File::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.SSync.File.md5)
}
inline void SSync_File::set_md5(const char* value,
    size_t size) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.SSync.File.md5)
}
inline std::string* SSync_File::_internal_mutable_md5() {
  
  return md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SSync_File::release_md5() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.SSync.File.md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SSync_File::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.SSync.File.md5)
}

// -------------------------------------------------------------------

// SSync_Directory

// string id = 1;
inline void SSync_Directory::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& SSync_Directory::id() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SSync.Directory.id)
  return _internal_id();
}
inline void SSync_Directory::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SSync.Directory.id)
}
inline std::string* SSync_Directory::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.SSync.Directory.id)
  return _internal_mutable_id();
}
inline const std::string& SSync_Directory::_internal_id() const {
  return id_.Get();
}
inline void SSync_Directory::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SSync_Directory::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.SSync.Directory.id)
}
inline void SSync_Directory::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.SSync.Directory.id)
}
inline void SSync_Directory::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.SSync.Directory.id)
}
inline std::string* SSync_Directory::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SSync_Directory::release_id() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.SSync.Directory.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SSync_Directory::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.SSync.Directory.id)
}

// string name = 2;
inline void SSync_Directory::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SSync_Directory::name() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SSync.Directory.name)
  return _internal_name();
}
inline void SSync_Directory::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SSync.Directory.name)
}
inline std::string* SSync_Directory::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.SSync.Directory.name)
  return _internal_mutable_name();
}
inline const std::string& SSync_Directory::_internal_name() const {
  return name_.Get();
}
inline void SSync_Directory::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SSync_Directory::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.SSync.Directory.name)
}
inline void SSync_Directory::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.SSync.Directory.name)
}
inline void SSync_Directory::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.SSync.Directory.name)
}
inline std::string* SSync_Directory::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SSync_Directory::release_name() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.SSync.Directory.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SSync_Directory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.SSync.Directory.name)
}

// repeated .SyncCloudDrive.SSync.Directory sons = 3;
inline int SSync_Directory::_internal_sons_size() const {
  return sons_.size();
}
inline int SSync_Directory::sons_size() const {
  return _internal_sons_size();
}
inline void SSync_Directory::clear_sons() {
  sons_.Clear();
}
inline ::SyncCloudDrive::SSync_Directory* SSync_Directory::mutable_sons(int index) {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.SSync.Directory.sons)
  return sons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncCloudDrive::SSync_Directory >*
SSync_Directory::mutable_sons() {
  // @@protoc_insertion_point(field_mutable_list:SyncCloudDrive.SSync.Directory.sons)
  return &sons_;
}
inline const ::SyncCloudDrive::SSync_Directory& SSync_Directory::_internal_sons(int index) const {
  return sons_.Get(index);
}
inline const ::SyncCloudDrive::SSync_Directory& SSync_Directory::sons(int index) const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SSync.Directory.sons)
  return _internal_sons(index);
}
inline ::SyncCloudDrive::SSync_Directory* SSync_Directory::_internal_add_sons() {
  return sons_.Add();
}
inline ::SyncCloudDrive::SSync_Directory* SSync_Directory::add_sons() {
  // @@protoc_insertion_point(field_add:SyncCloudDrive.SSync.Directory.sons)
  return _internal_add_sons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncCloudDrive::SSync_Directory >&
SSync_Directory::sons() const {
  // @@protoc_insertion_point(field_list:SyncCloudDrive.SSync.Directory.sons)
  return sons_;
}

// repeated .SyncCloudDrive.SSync.File files = 4;
inline int SSync_Directory::_internal_files_size() const {
  return files_.size();
}
inline int SSync_Directory::files_size() const {
  return _internal_files_size();
}
inline void SSync_Directory::clear_files() {
  files_.Clear();
}
inline ::SyncCloudDrive::SSync_File* SSync_Directory::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.SSync.Directory.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncCloudDrive::SSync_File >*
SSync_Directory::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:SyncCloudDrive.SSync.Directory.files)
  return &files_;
}
inline const ::SyncCloudDrive::SSync_File& SSync_Directory::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::SyncCloudDrive::SSync_File& SSync_Directory::files(int index) const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SSync.Directory.files)
  return _internal_files(index);
}
inline ::SyncCloudDrive::SSync_File* SSync_Directory::_internal_add_files() {
  return files_.Add();
}
inline ::SyncCloudDrive::SSync_File* SSync_Directory::add_files() {
  // @@protoc_insertion_point(field_add:SyncCloudDrive.SSync.Directory.files)
  return _internal_add_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SyncCloudDrive::SSync_File >&
SSync_Directory::files() const {
  // @@protoc_insertion_point(field_list:SyncCloudDrive.SSync.Directory.files)
  return files_;
}

// -------------------------------------------------------------------

// SSync

// int32 state = 1;
inline void SSync::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSync::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSync::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SSync.state)
  return _internal_state();
}
inline void SSync::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SSync::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SSync.state)
}

// .SyncCloudDrive.SSync.Directory root = 2;
inline bool SSync::_internal_has_root() const {
  return this != internal_default_instance() && root_ != nullptr;
}
inline bool SSync::has_root() const {
  return _internal_has_root();
}
inline void SSync::clear_root() {
  if (GetArena() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
}
inline const ::SyncCloudDrive::SSync_Directory& SSync::_internal_root() const {
  const ::SyncCloudDrive::SSync_Directory* p = root_;
  return p != nullptr ? *p : reinterpret_cast<const ::SyncCloudDrive::SSync_Directory&>(
      ::SyncCloudDrive::_SSync_Directory_default_instance_);
}
inline const ::SyncCloudDrive::SSync_Directory& SSync::root() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SSync.root)
  return _internal_root();
}
inline void SSync::unsafe_arena_set_allocated_root(
    ::SyncCloudDrive::SSync_Directory* root) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
  }
  root_ = root;
  if (root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SyncCloudDrive.SSync.root)
}
inline ::SyncCloudDrive::SSync_Directory* SSync::release_root() {
  
  ::SyncCloudDrive::SSync_Directory* temp = root_;
  root_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SyncCloudDrive::SSync_Directory* SSync::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.SSync.root)
  
  ::SyncCloudDrive::SSync_Directory* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::SyncCloudDrive::SSync_Directory* SSync::_internal_mutable_root() {
  
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyncCloudDrive::SSync_Directory>(GetArena());
    root_ = p;
  }
  return root_;
}
inline ::SyncCloudDrive::SSync_Directory* SSync::mutable_root() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.SSync.root)
  return _internal_mutable_root();
}
inline void SSync::set_allocated_root(::SyncCloudDrive::SSync_Directory* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root);
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    
  } else {
    
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.SSync.root)
}

// -------------------------------------------------------------------

// SUploadFile

// int32 no = 1;
inline void SUploadFile::clear_no() {
  no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUploadFile::_internal_no() const {
  return no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUploadFile::no() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SUploadFile.no)
  return _internal_no();
}
inline void SUploadFile::_internal_set_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  no_ = value;
}
inline void SUploadFile::set_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_no(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SUploadFile.no)
}

// int32 slide_no = 2;
inline void SUploadFile::clear_slide_no() {
  slide_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUploadFile::_internal_slide_no() const {
  return slide_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SUploadFile::slide_no() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SUploadFile.slide_no)
  return _internal_slide_no();
}
inline void SUploadFile::_internal_set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slide_no_ = value;
}
inline void SUploadFile::set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slide_no(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SUploadFile.slide_no)
}

// -------------------------------------------------------------------

// SDownload

// string file_id = 1;
inline void SDownload::clear_file_id() {
  file_id_.ClearToEmpty();
}
inline const std::string& SDownload::file_id() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SDownload.file_id)
  return _internal_file_id();
}
inline void SDownload::set_file_id(const std::string& value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SDownload.file_id)
}
inline std::string* SDownload::mutable_file_id() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.SDownload.file_id)
  return _internal_mutable_file_id();
}
inline const std::string& SDownload::_internal_file_id() const {
  return file_id_.Get();
}
inline void SDownload::_internal_set_file_id(const std::string& value) {
  
  file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SDownload::set_file_id(std::string&& value) {
  
  file_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.SDownload.file_id)
}
inline void SDownload::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.SDownload.file_id)
}
inline void SDownload::set_file_id(const char* value,
    size_t size) {
  
  file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.SDownload.file_id)
}
inline std::string* SDownload::_internal_mutable_file_id() {
  
  return file_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SDownload::release_file_id() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.SDownload.file_id)
  return file_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SDownload::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    
  } else {
    
  }
  file_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.SDownload.file_id)
}

// int32 slide_no = 2;
inline void SDownload::clear_slide_no() {
  slide_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDownload::_internal_slide_no() const {
  return slide_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDownload::slide_no() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SDownload.slide_no)
  return _internal_slide_no();
}
inline void SDownload::_internal_set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slide_no_ = value;
}
inline void SDownload::set_slide_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slide_no(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SDownload.slide_no)
}

// string data = 3;
inline void SDownload::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SDownload::data() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SDownload.data)
  return _internal_data();
}
inline void SDownload::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SDownload.data)
}
inline std::string* SDownload::mutable_data() {
  // @@protoc_insertion_point(field_mutable:SyncCloudDrive.SDownload.data)
  return _internal_mutable_data();
}
inline const std::string& SDownload::_internal_data() const {
  return data_.Get();
}
inline void SDownload::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SDownload::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncCloudDrive.SDownload.data)
}
inline void SDownload::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SyncCloudDrive.SDownload.data)
}
inline void SDownload::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncCloudDrive.SDownload.data)
}
inline std::string* SDownload::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SDownload::release_data() {
  // @@protoc_insertion_point(field_release:SyncCloudDrive.SDownload.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SDownload::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDrive.SDownload.data)
}

// -------------------------------------------------------------------

// SDeleteFile

// int32 state = 1;
inline void SDeleteFile::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDeleteFile::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDeleteFile::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SDeleteFile.state)
  return _internal_state();
}
inline void SDeleteFile::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SDeleteFile::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SDeleteFile.state)
}

// -------------------------------------------------------------------

// SAddDirectory

// int32 state = 1;
inline void SAddDirectory::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAddDirectory::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAddDirectory::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SAddDirectory.state)
  return _internal_state();
}
inline void SAddDirectory::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SAddDirectory::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SAddDirectory.state)
}

// -------------------------------------------------------------------

// SDeleteDirectory

// int32 state = 1;
inline void SDeleteDirectory::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDeleteDirectory::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDeleteDirectory::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SDeleteDirectory.state)
  return _internal_state();
}
inline void SDeleteDirectory::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SDeleteDirectory::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SDeleteDirectory.state)
}

// -------------------------------------------------------------------

// SModifyUser

// int32 state = 1;
inline void SModifyUser::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SModifyUser::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SModifyUser::state() const {
  // @@protoc_insertion_point(field_get:SyncCloudDrive.SModifyUser.state)
  return _internal_state();
}
inline void SModifyUser::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SModifyUser::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SyncCloudDrive.SModifyUser.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SyncCloudDrive

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SyncCloudDrive::ServerCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SyncCloudDrive::ServerCommandType>() {
  return ::SyncCloudDrive::ServerCommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fto_5fclient_2eproto
