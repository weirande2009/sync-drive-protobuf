// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_proto/client_to_server_frontend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto;
namespace SyncCloudDriveFrontend {
class CLogin;
struct CLoginDefaultTypeInternal;
extern CLoginDefaultTypeInternal _CLogin_default_instance_;
class CModifyUser;
struct CModifyUserDefaultTypeInternal;
extern CModifyUserDefaultTypeInternal _CModifyUser_default_instance_;
class CRegister;
struct CRegisterDefaultTypeInternal;
extern CRegisterDefaultTypeInternal _CRegister_default_instance_;
class CStart;
struct CStartDefaultTypeInternal;
extern CStartDefaultTypeInternal _CStart_default_instance_;
}  // namespace SyncCloudDriveFrontend
PROTOBUF_NAMESPACE_OPEN
template<> ::SyncCloudDriveFrontend::CLogin* Arena::CreateMaybeMessage<::SyncCloudDriveFrontend::CLogin>(Arena*);
template<> ::SyncCloudDriveFrontend::CModifyUser* Arena::CreateMaybeMessage<::SyncCloudDriveFrontend::CModifyUser>(Arena*);
template<> ::SyncCloudDriveFrontend::CRegister* Arena::CreateMaybeMessage<::SyncCloudDriveFrontend::CRegister>(Arena*);
template<> ::SyncCloudDriveFrontend::CStart* Arena::CreateMaybeMessage<::SyncCloudDriveFrontend::CStart>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SyncCloudDriveFrontend {

enum ClientCommandType : int {
  C_REGISTER = 0,
  C_LOGIN = 1,
  C_START = 2,
  C_END = 3,
  C_MODIFY_USER = 4,
  ClientCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ClientCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ClientCommandType_IsValid(int value);
constexpr ClientCommandType ClientCommandType_MIN = C_REGISTER;
constexpr ClientCommandType ClientCommandType_MAX = C_MODIFY_USER;
constexpr int ClientCommandType_ARRAYSIZE = ClientCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommandType_descriptor();
template<typename T>
inline const std::string& ClientCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientCommandType_descriptor(), enum_t_value);
}
inline bool ClientCommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientCommandType>(
    ClientCommandType_descriptor(), name, value);
}
// ===================================================================

class CRegister final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDriveFrontend.CRegister) */ {
 public:
  inline CRegister() : CRegister(nullptr) {}
  ~CRegister() override;
  explicit PROTOBUF_CONSTEXPR CRegister(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CRegister(const CRegister& from);
  CRegister(CRegister&& from) noexcept
    : CRegister() {
    *this = ::std::move(from);
  }

  inline CRegister& operator=(const CRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRegister& operator=(CRegister&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CRegister& default_instance() {
    return *internal_default_instance();
  }
  static inline const CRegister* internal_default_instance() {
    return reinterpret_cast<const CRegister*>(
               &_CRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CRegister& a, CRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(CRegister* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CRegister>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CRegister& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CRegister& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRegister* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDriveFrontend.CRegister";
  }
  protected:
  explicit CRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordMd5FieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password_md5 = 2;
  void clear_password_md5();
  const std::string& password_md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password_md5();
  PROTOBUF_NODISCARD std::string* release_password_md5();
  void set_allocated_password_md5(std::string* password_md5);
  private:
  const std::string& _internal_password_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_md5(const std::string& value);
  std::string* _internal_mutable_password_md5();
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDriveFrontend.CRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_md5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto;
};
// -------------------------------------------------------------------

class CLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDriveFrontend.CLogin) */ {
 public:
  inline CLogin() : CLogin(nullptr) {}
  ~CLogin() override;
  explicit PROTOBUF_CONSTEXPR CLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLogin(const CLogin& from);
  CLogin(CLogin&& from) noexcept
    : CLogin() {
    *this = ::std::move(from);
  }

  inline CLogin& operator=(const CLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLogin& operator=(CLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLogin* internal_default_instance() {
    return reinterpret_cast<const CLogin*>(
               &_CLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CLogin& a, CLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(CLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CLogin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLogin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDriveFrontend.CLogin";
  }
  protected:
  explicit CLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordMd5FieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password_md5 = 2;
  void clear_password_md5();
  const std::string& password_md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password_md5();
  PROTOBUF_NODISCARD std::string* release_password_md5();
  void set_allocated_password_md5(std::string* password_md5);
  private:
  const std::string& _internal_password_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_md5(const std::string& value);
  std::string* _internal_mutable_password_md5();
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDriveFrontend.CLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_md5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto;
};
// -------------------------------------------------------------------

class CStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDriveFrontend.CStart) */ {
 public:
  inline CStart() : CStart(nullptr) {}
  ~CStart() override;
  explicit PROTOBUF_CONSTEXPR CStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CStart(const CStart& from);
  CStart(CStart&& from) noexcept
    : CStart() {
    *this = ::std::move(from);
  }

  inline CStart& operator=(const CStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline CStart& operator=(CStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const CStart* internal_default_instance() {
    return reinterpret_cast<const CStart*>(
               &_CStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CStart& a, CStart& b) {
    a.Swap(&b);
  }
  inline void Swap(CStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CStart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDriveFrontend.CStart";
  }
  protected:
  explicit CStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncDirectoryPathFieldNumber = 1,
  };
  // string sync_directory_path = 1;
  void clear_sync_directory_path();
  const std::string& sync_directory_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sync_directory_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sync_directory_path();
  PROTOBUF_NODISCARD std::string* release_sync_directory_path();
  void set_allocated_sync_directory_path(std::string* sync_directory_path);
  private:
  const std::string& _internal_sync_directory_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sync_directory_path(const std::string& value);
  std::string* _internal_mutable_sync_directory_path();
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDriveFrontend.CStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sync_directory_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto;
};
// -------------------------------------------------------------------

class CModifyUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncCloudDriveFrontend.CModifyUser) */ {
 public:
  inline CModifyUser() : CModifyUser(nullptr) {}
  ~CModifyUser() override;
  explicit PROTOBUF_CONSTEXPR CModifyUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CModifyUser(const CModifyUser& from);
  CModifyUser(CModifyUser&& from) noexcept
    : CModifyUser() {
    *this = ::std::move(from);
  }

  inline CModifyUser& operator=(const CModifyUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline CModifyUser& operator=(CModifyUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CModifyUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const CModifyUser* internal_default_instance() {
    return reinterpret_cast<const CModifyUser*>(
               &_CModifyUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CModifyUser& a, CModifyUser& b) {
    a.Swap(&b);
  }
  inline void Swap(CModifyUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CModifyUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CModifyUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CModifyUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CModifyUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CModifyUser& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CModifyUser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncCloudDriveFrontend.CModifyUser";
  }
  protected:
  explicit CModifyUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SyncCloudDriveFrontend.CModifyUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CRegister

// string name = 1;
inline void CRegister::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CRegister::name() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.CRegister.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRegister::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.CRegister.name)
}
inline std::string* CRegister::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SyncCloudDriveFrontend.CRegister.name)
  return _s;
}
inline const std::string& CRegister::_internal_name() const {
  return name_.Get();
}
inline void CRegister::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* CRegister::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* CRegister::release_name() {
  // @@protoc_insertion_point(field_release:SyncCloudDriveFrontend.CRegister.name)
  return name_.Release();
}
inline void CRegister::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDriveFrontend.CRegister.name)
}

// string password_md5 = 2;
inline void CRegister::clear_password_md5() {
  password_md5_.ClearToEmpty();
}
inline const std::string& CRegister::password_md5() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.CRegister.password_md5)
  return _internal_password_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CRegister::set_password_md5(ArgT0&& arg0, ArgT... args) {
 
 password_md5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.CRegister.password_md5)
}
inline std::string* CRegister::mutable_password_md5() {
  std::string* _s = _internal_mutable_password_md5();
  // @@protoc_insertion_point(field_mutable:SyncCloudDriveFrontend.CRegister.password_md5)
  return _s;
}
inline const std::string& CRegister::_internal_password_md5() const {
  return password_md5_.Get();
}
inline void CRegister::_internal_set_password_md5(const std::string& value) {
  
  password_md5_.Set(value, GetArenaForAllocation());
}
inline std::string* CRegister::_internal_mutable_password_md5() {
  
  return password_md5_.Mutable(GetArenaForAllocation());
}
inline std::string* CRegister::release_password_md5() {
  // @@protoc_insertion_point(field_release:SyncCloudDriveFrontend.CRegister.password_md5)
  return password_md5_.Release();
}
inline void CRegister::set_allocated_password_md5(std::string* password_md5) {
  if (password_md5 != nullptr) {
    
  } else {
    
  }
  password_md5_.SetAllocated(password_md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_md5_.IsDefault()) {
    password_md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDriveFrontend.CRegister.password_md5)
}

// -------------------------------------------------------------------

// CLogin

// string name = 1;
inline void CLogin::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CLogin::name() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.CLogin.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLogin::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.CLogin.name)
}
inline std::string* CLogin::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SyncCloudDriveFrontend.CLogin.name)
  return _s;
}
inline const std::string& CLogin::_internal_name() const {
  return name_.Get();
}
inline void CLogin::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* CLogin::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* CLogin::release_name() {
  // @@protoc_insertion_point(field_release:SyncCloudDriveFrontend.CLogin.name)
  return name_.Release();
}
inline void CLogin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDriveFrontend.CLogin.name)
}

// string password_md5 = 2;
inline void CLogin::clear_password_md5() {
  password_md5_.ClearToEmpty();
}
inline const std::string& CLogin::password_md5() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.CLogin.password_md5)
  return _internal_password_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLogin::set_password_md5(ArgT0&& arg0, ArgT... args) {
 
 password_md5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.CLogin.password_md5)
}
inline std::string* CLogin::mutable_password_md5() {
  std::string* _s = _internal_mutable_password_md5();
  // @@protoc_insertion_point(field_mutable:SyncCloudDriveFrontend.CLogin.password_md5)
  return _s;
}
inline const std::string& CLogin::_internal_password_md5() const {
  return password_md5_.Get();
}
inline void CLogin::_internal_set_password_md5(const std::string& value) {
  
  password_md5_.Set(value, GetArenaForAllocation());
}
inline std::string* CLogin::_internal_mutable_password_md5() {
  
  return password_md5_.Mutable(GetArenaForAllocation());
}
inline std::string* CLogin::release_password_md5() {
  // @@protoc_insertion_point(field_release:SyncCloudDriveFrontend.CLogin.password_md5)
  return password_md5_.Release();
}
inline void CLogin::set_allocated_password_md5(std::string* password_md5) {
  if (password_md5 != nullptr) {
    
  } else {
    
  }
  password_md5_.SetAllocated(password_md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_md5_.IsDefault()) {
    password_md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDriveFrontend.CLogin.password_md5)
}

// -------------------------------------------------------------------

// CStart

// string sync_directory_path = 1;
inline void CStart::clear_sync_directory_path() {
  sync_directory_path_.ClearToEmpty();
}
inline const std::string& CStart::sync_directory_path() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.CStart.sync_directory_path)
  return _internal_sync_directory_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CStart::set_sync_directory_path(ArgT0&& arg0, ArgT... args) {
 
 sync_directory_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.CStart.sync_directory_path)
}
inline std::string* CStart::mutable_sync_directory_path() {
  std::string* _s = _internal_mutable_sync_directory_path();
  // @@protoc_insertion_point(field_mutable:SyncCloudDriveFrontend.CStart.sync_directory_path)
  return _s;
}
inline const std::string& CStart::_internal_sync_directory_path() const {
  return sync_directory_path_.Get();
}
inline void CStart::_internal_set_sync_directory_path(const std::string& value) {
  
  sync_directory_path_.Set(value, GetArenaForAllocation());
}
inline std::string* CStart::_internal_mutable_sync_directory_path() {
  
  return sync_directory_path_.Mutable(GetArenaForAllocation());
}
inline std::string* CStart::release_sync_directory_path() {
  // @@protoc_insertion_point(field_release:SyncCloudDriveFrontend.CStart.sync_directory_path)
  return sync_directory_path_.Release();
}
inline void CStart::set_allocated_sync_directory_path(std::string* sync_directory_path) {
  if (sync_directory_path != nullptr) {
    
  } else {
    
  }
  sync_directory_path_.SetAllocated(sync_directory_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sync_directory_path_.IsDefault()) {
    sync_directory_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDriveFrontend.CStart.sync_directory_path)
}

// -------------------------------------------------------------------

// CModifyUser

// int32 type = 1;
inline void CModifyUser::clear_type() {
  type_ = 0;
}
inline int32_t CModifyUser::_internal_type() const {
  return type_;
}
inline int32_t CModifyUser::type() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.CModifyUser.type)
  return _internal_type();
}
inline void CModifyUser::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void CModifyUser::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.CModifyUser.type)
}

// string content = 2;
inline void CModifyUser::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& CModifyUser::content() const {
  // @@protoc_insertion_point(field_get:SyncCloudDriveFrontend.CModifyUser.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CModifyUser::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SyncCloudDriveFrontend.CModifyUser.content)
}
inline std::string* CModifyUser::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:SyncCloudDriveFrontend.CModifyUser.content)
  return _s;
}
inline const std::string& CModifyUser::_internal_content() const {
  return content_.Get();
}
inline void CModifyUser::_internal_set_content(const std::string& value) {
  
  content_.Set(value, GetArenaForAllocation());
}
inline std::string* CModifyUser::_internal_mutable_content() {
  
  return content_.Mutable(GetArenaForAllocation());
}
inline std::string* CModifyUser::release_content() {
  // @@protoc_insertion_point(field_release:SyncCloudDriveFrontend.CModifyUser.content)
  return content_.Release();
}
inline void CModifyUser::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault()) {
    content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SyncCloudDriveFrontend.CModifyUser.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SyncCloudDriveFrontend

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SyncCloudDriveFrontend::ClientCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SyncCloudDriveFrontend::ClientCommandType>() {
  return ::SyncCloudDriveFrontend::ClientCommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_5fproto_2fclient_5fto_5fserver_5ffrontend_2eproto
